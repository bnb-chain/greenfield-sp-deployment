apiVersion: v1
kind: Namespace
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: gf-sp-a
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: gf-sp-b
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: gf-sp-c
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: gf-sp-d
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: gf-sp-devops
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: gf-sp-e
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: gf-sp-f
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: gf-sp-g
---
apiVersion: v1
data:
  config.toml: |
    Service = [
      "Gateway",
    ]

    [GatewayCfg]
        Address = "0.0.0.0:9033"
        Domain = "gf-sp-a-bk.dev.nodereal.cc"
        UploaderServiceAddress = "uploader:9133"
        DownloaderServiceAddress = "downloader:9233"
kind: ConfigMap
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: config-gateway-c7fghg59km
  namespace: gf-sp-a
---
apiVersion: v1
data:
  config.toml: |
    Service = [
      "StoneHub",
    ]

    [StoneHubCfg]
    StorageProvider = "bnb-sp"
    Address = "0.0.0.0:9333"
    JobDBType = "mysql"
    MetaDBType = "mysql"
    [StoneHubCfg.JobSqlDBConfig]
        Address = "greenfield-sp-dev-a-cluster.cluster-cnvhwydws6wc.ap-northeast-1.rds.amazonaws.com:3306"
        Database = "job_db"
    [StoneHubCfg.MetaSqlDBConfig]
        Address = "greenfield-sp-dev-a-cluster.cluster-cnvhwydws6wc.ap-northeast-1.rds.amazonaws.com:3306"
        Database = "meta_db"
kind: ConfigMap
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: config-stonehub-fm45d5c8tm
  namespace: gf-sp-a
---
apiVersion: v1
data:
  config.toml: |
    Service = [
      "StoneNode",
    ]

    [StoneNodeCfg]
        StorageProvider = "bnb-sp"
        Address = "0.0.0.0:9433"
        StoneHubServiceAddress = "stonehub:9333"
        SyncerServiceAddress = ["syncer.gf-sp-b.svc.cluster.local:9533","syncer.gf-sp-c.svc.cluster.local:9533",
                                "syncer.gf-sp-d.svc.cluster.local:9533","syncer.gf-sp-e.svc.cluster.local:9533",
                                "syncer.gf-sp-f.svc.cluster.local:9533","syncer.gf-sp-g.svc.cluster.local:9533",]
        StoneJobLimit = 64
        [StoneNodeCfg.PieceConfig]
            Shards = 0
            [StoneNodeCfg.PieceConfig.Store]
                Storage = "s3"
                BucketURL = "https://s3.ap-northeast-1.amazonaws.com/tf-nodereal-dev-greenfield-sp-a"
                MaxRetries = 5
                TestMode = true
                NoSignRequest = false
                TlsInsecureSkipVerify = false
kind: ConfigMap
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: config-stonenode-c65b7628hd
  namespace: gf-sp-a
---
apiVersion: v1
data:
  config.toml: |
    Service = [
      "Syncer",
    ]

    [SyncerCfg]
        StorageProvider = "bnb-sp"
        Address = "0.0.0.0:9533"
        MetaDBType = "mysql"
        [SyncerCfg.PieceConfig.Store]
            Storage = "s3"
            BucketURL = "https://s3.ap-northeast-1.amazonaws.com/tf-nodereal-dev-greenfield-sp-a"
            MaxRetries = 5
            TestMode = true
            NoSignRequest = false
            TlsInsecureSkipVerify = false
        [SyncerCfg.MetaSqlDBConfig]
            Address = "greenfield-sp-dev-a-cluster.cluster-cnvhwydws6wc.ap-northeast-1.rds.amazonaws.com:3306"
            Database = "meta_db"
kind: ConfigMap
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: config-syncer-f55dmbtk9g
  namespace: gf-sp-a
---
apiVersion: v1
data:
  config.toml: |
    Service = [
      "Uploader", "Downloader", "Challenge",
    ]

    [UploaderCfg]
        StorageProvider = "bnb-sp"
        Address = "0.0.0.0:9133"
        StoneHubServiceAddress = "stonehub:9333"
        MetaDBType = "mysql"
        [UploaderCfg.PieceStoreConfig]
            Shards = 0
            [UploaderCfg.PieceStoreConfig.Store]
                Storage = "S3"
                BucketURL = "https://s3.ap-northeast-1.amazonaws.com/tf-nodereal-dev-greenfield-sp-a"
                MaxRetries = 5
                TestMode = true
                NoSignRequest = false
                TlsInsecureSkipVerify = false
        [UploaderCfg.MetaSqlDBConfig]
            Address = "greenfield-sp-dev-a-cluster.cluster-cnvhwydws6wc.ap-northeast-1.rds.amazonaws.com:3306"
            Database = "meta_db"

    [DownloaderCfg]
        Address = "0.0.0.0:9233"
        [DownloaderCfg.PieceStoreConfig]
            Shards = 0
            [DownloaderCfg.PieceStoreConfig.Store]
                Storage = "S3"
                BucketURL = "https://s3.ap-northeast-1.amazonaws.com/tf-nodereal-dev-greenfield-sp-a"
                MaxRetries = 5
                TestMode = true
                NoSignRequest = false
                TlsInsecureSkipVerify = false

    [ChallengeCfg]
        Address = "0.0.0.0:9033"
        StorageProvider = "bnb-sp"
        MetaDBType = "mysql"
        [ChallengeCfg.MetaSqlDBConfig]
            Address = "greenfield-sp-dev-a-cluster.cluster-cnvhwydws6wc.ap-northeast-1.rds.amazonaws.com:3306"
            Database = "meta_db"
        [ChallengeCfg.PieceConfig]
            Shards = 0
            [ChallengeCfg.PieceConfig.Store]
                Storage = "s3"
                BucketURL = "https://s3.ap-northeast-1.amazonaws.com/tf-nodereal-dev-greenfield-sp-a"
                MaxRetries = 5
                TestMode = true
                NoSignRequest = false
                TlsInsecureSkipVerify = false
kind: ConfigMap
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: config-uploader-downloader-challenge-4mt2kbht5m
  namespace: gf-sp-a
---
apiVersion: v1
data:
  config.toml: |
    Service = [
      "Gateway",
    ]

    [GatewayCfg]
        Address = "0.0.0.0:9033"
        Domain = "gf-sp-b-bk.dev.nodereal.cc"
        UploaderServiceAddress = "uploader:9133"
        DownloaderServiceAddress = "downloader:9233"
kind: ConfigMap
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: config-gateway-d7bckf7g25
  namespace: gf-sp-b
---
apiVersion: v1
data:
  config.toml: |
    Service = [
      "StoneHub",
    ]

    [StoneHubCfg]
    StorageProvider = "bnb-sp"
    Address = "0.0.0.0:9333"
    JobDBType = "mysql"
    MetaDBType = "mysql"
    [StoneHubCfg.JobSqlDBConfig]
        Address = "greenfield-sp-dev-b-cluster.cluster-cnvhwydws6wc.ap-northeast-1.rds.amazonaws.com:3306"
        Database = "job_db"
    [StoneHubCfg.MetaSqlDBConfig]
        Address = "greenfield-sp-dev-b-cluster.cluster-cnvhwydws6wc.ap-northeast-1.rds.amazonaws.com:3306"
        Database = "meta_db"
kind: ConfigMap
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: config-stonehub-7f6h4dg275
  namespace: gf-sp-b
---
apiVersion: v1
data:
  config.toml: |
    Service = [
      "StoneNode",
    ]

    [StoneNodeCfg]
        StorageProvider = "bnb-sp"
        Address = "0.0.0.0:9433"
        StoneHubServiceAddress = "stonehub:9333"
        SyncerServiceAddress = ["syncer.gf-sp-a.svc.cluster.local:9533","syncer.gf-sp-c.svc.cluster.local:9533",
                                "syncer.gf-sp-d.svc.cluster.local:9533","syncer.gf-sp-e.svc.cluster.local:9533",
                                "syncer.gf-sp-f.svc.cluster.local:9533","syncer.gf-sp-g.svc.cluster.local:9533",]
        StoneJobLimit = 64
        [StoneNodeCfg.PieceConfig]
            Shards = 0
            [StoneNodeCfg.PieceConfig.Store]
                Storage = "s3"
                BucketURL = "https://s3.ap-northeast-1.amazonaws.com/tf-nodereal-dev-greenfield-sp-b"
                MaxRetries = 5
                TestMode = true
                NoSignRequest = false
                TlsInsecureSkipVerify = false
kind: ConfigMap
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: config-stonenode-427ft5dd99
  namespace: gf-sp-b
---
apiVersion: v1
data:
  config.toml: |
    Service = [
      "Syncer",
    ]

    [SyncerCfg]
        StorageProvider = "bnb-sp"
        Address = "0.0.0.0:9533"
        MetaDBType = "mysql"
        [SyncerCfg.PieceConfig.Store]
            Storage = "s3"
            BucketURL = "https://s3.ap-northeast-1.amazonaws.com/tf-nodereal-dev-greenfield-sp-b"
            MaxRetries = 5
            TestMode = true
            NoSignRequest = false
            TlsInsecureSkipVerify = false
        [SyncerCfg.MetaSqlDBConfig]
            Address = "greenfield-sp-dev-b-cluster.cluster-cnvhwydws6wc.ap-northeast-1.rds.amazonaws.com:3306"
            Database = "meta_db"
kind: ConfigMap
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: config-syncer-btkbdbthdm
  namespace: gf-sp-b
---
apiVersion: v1
data:
  config.toml: |
    Service = [
      "Uploader", "Downloader", "Challenge",
    ]

    [UploaderCfg]
        StorageProvider = "bnb-sp"
        Address = "0.0.0.0:9133"
        StoneHubServiceAddress = "stonehub:9333"
        MetaDBType = "mysql"
        [UploaderCfg.PieceStoreConfig]
            Shards = 0
            [UploaderCfg.PieceStoreConfig.Store]
                Storage = "S3"
                BucketURL = "https://s3.ap-northeast-1.amazonaws.com/tf-nodereal-dev-greenfield-sp-b"
                MaxRetries = 5
                TestMode = true
                NoSignRequest = false
                TlsInsecureSkipVerify = false
        [UploaderCfg.MetaSqlDBConfig]
            Address = "greenfield-sp-dev-b-cluster.cluster-cnvhwydws6wc.ap-northeast-1.rds.amazonaws.com:3306"
            Database = "meta_db"

    [DownloaderCfg]
        Address = "0.0.0.0:9233"
        [DownloaderCfg.PieceStoreConfig]
            Shards = 0
            [DownloaderCfg.PieceStoreConfig.Store]
                Storage = "S3"
                BucketURL = "https://s3.ap-northeast-1.amazonaws.com/tf-nodereal-dev-greenfield-sp-b"
                MaxRetries = 5
                TestMode = true
                NoSignRequest = false
                TlsInsecureSkipVerify = false

    [ChallengeCfg]
        Address = "0.0.0.0:9033"
        StorageProvider = "bnb-sp"
        MetaDBType = "mysql"
        [ChallengeCfg.MetaSqlDBConfig]
            Address = "greenfield-sp-dev-b-cluster.cluster-cnvhwydws6wc.ap-northeast-1.rds.amazonaws.com:3306"
            Database = "meta_db"
        [ChallengeCfg.PieceConfig]
            Shards = 0
            [ChallengeCfg.PieceConfig.Store]
                Storage = "s3"
                BucketURL = "https://s3.ap-northeast-1.amazonaws.com/tf-nodereal-dev-greenfield-sp-b"
                MaxRetries = 5
                TestMode = true
                NoSignRequest = false
                TlsInsecureSkipVerify = false
kind: ConfigMap
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: config-uploader-downloader-challenge-42tddtkfgd
  namespace: gf-sp-b
---
apiVersion: v1
data:
  config.toml: |
    Service = [
      "Gateway",
    ]

    [GatewayCfg]
        Address = "0.0.0.0:9033"
        Domain = "gf-sp-c-bk.dev.nodereal.cc"
        UploaderServiceAddress = "uploader:9133"
        DownloaderServiceAddress = "downloader:9233"
kind: ConfigMap
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: config-gateway-8c6bthd6km
  namespace: gf-sp-c
---
apiVersion: v1
data:
  config.toml: |
    Service = [
      "StoneHub",
    ]

    [StoneHubCfg]
    StorageProvider = "bnb-sp"
    Address = "0.0.0.0:9333"
    JobDBType = "mysql"
    MetaDBType = "mysql"
    [StoneHubCfg.JobSqlDBConfig]
        Address = "greenfield-sp-dev-c-cluster.cluster-cnvhwydws6wc.ap-northeast-1.rds.amazonaws.com:3306"
        Database = "job_db"
    [StoneHubCfg.MetaSqlDBConfig]
        Address = "greenfield-sp-dev-c-cluster.cluster-cnvhwydws6wc.ap-northeast-1.rds.amazonaws.com:3306"
        Database = "meta_db"
kind: ConfigMap
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: config-stonehub-2998c9b546
  namespace: gf-sp-c
---
apiVersion: v1
data:
  config.toml: |
    Service = [
      "StoneNode",
    ]

    [StoneNodeCfg]
        StorageProvider = "bnb-sp"
        Address = "0.0.0.0:9433"
        StoneHubServiceAddress = "stonehub:9333"
        SyncerServiceAddress = ["syncer.gf-sp-a.svc.cluster.local:9533","syncer.gf-sp-b.svc.cluster.local:9533",
                                "syncer.gf-sp-d.svc.cluster.local:9533","syncer.gf-sp-e.svc.cluster.local:9533",
                                "syncer.gf-sp-f.svc.cluster.local:9533","syncer.gf-sp-g.svc.cluster.local:9533",]
        StoneJobLimit = 64
        [StoneNodeCfg.PieceConfig]
            Shards = 0
            [StoneNodeCfg.PieceConfig.Store]
                Storage = "s3"
                BucketURL = "https://s3.ap-northeast-1.amazonaws.com/tf-nodereal-dev-greenfield-sp-c"
                MaxRetries = 5
                TestMode = true
                NoSignRequest = false
                TlsInsecureSkipVerify = false
kind: ConfigMap
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: config-stonenode-h9c84c9688
  namespace: gf-sp-c
---
apiVersion: v1
data:
  config.toml: |
    Service = [
      "Syncer",
    ]

    [SyncerCfg]
        StorageProvider = "bnb-sp"
        Address = "0.0.0.0:9533"
        MetaDBType = "mysql"
        [SyncerCfg.PieceConfig.Store]
            Storage = "s3"
            BucketURL = "https://s3.ap-northeast-1.amazonaws.com/tf-nodereal-dev-greenfield-sp-c"
            MaxRetries = 5
            TestMode = true
            NoSignRequest = false
            TlsInsecureSkipVerify = false
        [SyncerCfg.MetaSqlDBConfig]
            Address = "greenfield-sp-dev-c-cluster.cluster-cnvhwydws6wc.ap-northeast-1.rds.amazonaws.com:3306"
            Database = "meta_db"
kind: ConfigMap
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: config-syncer-g2gct9km98
  namespace: gf-sp-c
---
apiVersion: v1
data:
  config.toml: |
    Service = [
      "Uploader", "Downloader", "Challenge",
    ]

    [UploaderCfg]
        StorageProvider = "bnb-sp"
        Address = "0.0.0.0:9133"
        StoneHubServiceAddress = "stonehub:9333"
        MetaDBType = "mysql"
        [UploaderCfg.PieceStoreConfig]
            Shards = 0
            [UploaderCfg.PieceStoreConfig.Store]
                Storage = "S3"
                BucketURL = "https://s3.ap-northeast-1.amazonaws.com/tf-nodereal-dev-greenfield-sp-c"
                MaxRetries = 5
                TestMode = true
                NoSignRequest = false
                TlsInsecureSkipVerify = false
        [UploaderCfg.MetaSqlDBConfig]
            Address = "greenfield-sp-dev-c-cluster.cluster-cnvhwydws6wc.ap-northeast-1.rds.amazonaws.com:3306"
            Database = "meta_db"

    [DownloaderCfg]
        Address = "0.0.0.0:9233"
        [DownloaderCfg.PieceStoreConfig]
            Shards = 0
            [DownloaderCfg.PieceStoreConfig.Store]
                Storage = "S3"
                BucketURL = "https://s3.ap-northeast-1.amazonaws.com/tf-nodereal-dev-greenfield-sp-c"
                MaxRetries = 5
                TestMode = true
                NoSignRequest = false
                TlsInsecureSkipVerify = false

    [ChallengeCfg]
        Address = "0.0.0.0:9033"
        StorageProvider = "bnb-sp"
        MetaDBType = "mysql"
        [ChallengeCfg.MetaSqlDBConfig]
            Address = "greenfield-sp-dev-c-cluster.cluster-cnvhwydws6wc.ap-northeast-1.rds.amazonaws.com:3306"
            Database = "meta_db"
        [ChallengeCfg.PieceConfig]
            Shards = 0
            [ChallengeCfg.PieceConfig.Store]
                Storage = "s3"
                BucketURL = "https://s3.ap-northeast-1.amazonaws.com/tf-nodereal-dev-greenfield-sp-c"
                MaxRetries = 5
                TestMode = true
                NoSignRequest = false
                TlsInsecureSkipVerify = false
kind: ConfigMap
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: config-uploader-downloader-challenge-dtgbk5m895
  namespace: gf-sp-c
---
apiVersion: v1
data:
  config.toml: |
    Service = [
      "Gateway",
    ]

    [GatewayCfg]
        Address = "0.0.0.0:9033"
        Domain = "gf-sp-devops-bk.dev.nodereal.cc"
        UploaderServiceAddress = "uploader:9133"
        DownloaderServiceAddress = "downloader:9233"
kind: ConfigMap
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: config-gateway-4h8tt6fd7g
  namespace: gf-sp-devops
---
apiVersion: v1
data:
  config.toml: |
    Service = [
      "StoneHub",
    ]

    [StoneHubCfg]
    StorageProvider = "bnb-sp"
    Address = "0.0.0.0:9333"
    JobDBType = "mysql"
    MetaDBType = "mysql"
    [StoneHubCfg.JobSqlDBConfig]
        Address = "greenfield-sp-dev-devops-cluster.cluster-cnvhwydws6wc.ap-northeast-1.rds.amazonaws.com:3306"
        Database = "job_db"
    [StoneHubCfg.MetaSqlDBConfig]
        Address = "greenfield-sp-dev-devops-cluster.cluster-cnvhwydws6wc.ap-northeast-1.rds.amazonaws.com:3306"
        Database = "meta_db"
kind: ConfigMap
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: config-stonehub-49528bgm7k
  namespace: gf-sp-devops
---
apiVersion: v1
data:
  config.toml: |
    Service = [
      "StoneNode",
    ]

    [StoneNodeCfg]
        StorageProvider = "bnb-sp"
        Address = "0.0.0.0:9433"
        StoneHubServiceAddress = "stonehub:9333"
        SyncerServiceAddress = ["syncer:9533"]
        StoneJobLimit = 64
        [StoneNodeCfg.PieceConfig]
            Shards = 0
            [StoneNodeCfg.PieceConfig.Store]
                Storage = "s3"
                BucketURL = "https://s3.ap-northeast-1.amazonaws.com/tf-nodereal-dev-greenfield-sp-devops"
                MaxRetries = 5
                TestMode = true
                NoSignRequest = false
                TlsInsecureSkipVerify = false
kind: ConfigMap
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: config-stonenode-6kffh47g8k
  namespace: gf-sp-devops
---
apiVersion: v1
data:
  config.toml: |
    Service = [
      "Syncer",
    ]

    [SyncerCfg]
        StorageProvider = "bnb-sp"
        Address = "0.0.0.0:9533"
        MetaDBType = "mysql"
        [SyncerCfg.PieceConfig.Store]
            Storage = "s3"
            BucketURL = "https://s3.ap-northeast-1.amazonaws.com/tf-nodereal-dev-greenfield-sp-devops"
            MaxRetries = 5
            TestMode = true
            NoSignRequest = false
            TlsInsecureSkipVerify = false
        [SyncerCfg.MetaSqlDBConfig]
            Address = "greenfield-sp-dev-devops-cluster.cluster-cnvhwydws6wc.ap-northeast-1.rds.amazonaws.com:3306"
            Database = "meta_db"
kind: ConfigMap
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: config-syncer-kt2gkt44k9
  namespace: gf-sp-devops
---
apiVersion: v1
data:
  config.toml: |
    Service = [
      "Uploader", "Downloader", "Challenge",
    ]

    [UploaderCfg]
        StorageProvider = "bnb-sp"
        Address = "0.0.0.0:9133"
        StoneHubServiceAddress = "stonehub:9333"
        MetaDBType = "mysql"
        [UploaderCfg.PieceStoreConfig]
            Shards = 0
            [UploaderCfg.PieceStoreConfig.Store]
                Storage = "S3"
                BucketURL = "https://s3.ap-northeast-1.amazonaws.com/tf-nodereal-dev-greenfield-sp-devops"
                MaxRetries = 5
                TestMode = true
                NoSignRequest = false
                TlsInsecureSkipVerify = false
        [UploaderCfg.MetaSqlDBConfig]
            Address = "greenfield-sp-dev-devops-cluster.cluster-cnvhwydws6wc.ap-northeast-1.rds.amazonaws.com:3306"
            Database = "meta_db"

    [DownloaderCfg]
        Address = "0.0.0.0:9233"
        [DownloaderCfg.PieceStoreConfig]
            Shards = 0
            [DownloaderCfg.PieceStoreConfig.Store]
                Storage = "S3"
                BucketURL = "https://s3.ap-northeast-1.amazonaws.com/tf-nodereal-dev-greenfield-sp-devops"
                MaxRetries = 5
                TestMode = true
                NoSignRequest = false
                TlsInsecureSkipVerify = false

    [ChallengeCfg]
        Address = "0.0.0.0:9033"
        StorageProvider = "bnb-sp"
        MetaDBType = "mysql"
        [ChallengeCfg.MetaSqlDBConfig]
            Address = "greenfield-sp-dev-devops-cluster.cluster-cnvhwydws6wc.ap-northeast-1.rds.amazonaws.com:3306"
            Database = "meta_db"
        [ChallengeCfg.PieceConfig]
            Shards = 0
            [ChallengeCfg.PieceConfig.Store]
                Storage = "s3"
                BucketURL = "https://s3.ap-northeast-1.amazonaws.com/tf-nodereal-dev-greenfield-sp-devops"
                MaxRetries = 5
                TestMode = true
                NoSignRequest = false
                TlsInsecureSkipVerify = false
kind: ConfigMap
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: config-uploader-downloader-challenge-fh4256hkdd
  namespace: gf-sp-devops
---
apiVersion: v1
data:
  config.toml: |
    Service = [
      "Gateway",
    ]

    [GatewayCfg]
        Address = "0.0.0.0:9033"
        Domain = "gf-sp-d-bk.dev.nodereal.cc"
        UploaderServiceAddress = "uploader:9133"
        DownloaderServiceAddress = "downloader:9233"
kind: ConfigMap
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: config-gateway-kc4cbffc62
  namespace: gf-sp-d
---
apiVersion: v1
data:
  config.toml: |
    Service = [
      "StoneHub",
    ]

    [StoneHubCfg]
    StorageProvider = "bnb-sp"
    Address = "0.0.0.0:9333"
    JobDBType = "mysql"
    MetaDBType = "mysql"
    [StoneHubCfg.JobSqlDBConfig]
        Address = "greenfield-sp-dev-d-cluster.cluster-cnvhwydws6wc.ap-northeast-1.rds.amazonaws.com:3306"
        Database = "job_db"
    [StoneHubCfg.MetaSqlDBConfig]
        Address = "greenfield-sp-dev-d-cluster.cluster-cnvhwydws6wc.ap-northeast-1.rds.amazonaws.com:3306"
        Database = "meta_db"
kind: ConfigMap
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: config-stonehub-d4hk7f78f8
  namespace: gf-sp-d
---
apiVersion: v1
data:
  config.toml: |
    Service = [
      "StoneNode",
    ]

    [StoneNodeCfg]
        StorageProvider = "bnb-sp"
        Address = "0.0.0.0:9433"
        StoneHubServiceAddress = "stonehub:9333"
        SyncerServiceAddress = ["syncer.gf-sp-a.svc.cluster.local:9533","syncer.gf-sp-b.svc.cluster.local:9533",
                                "syncer.gf-sp-c.svc.cluster.local:9533","syncer.gf-sp-e.svc.cluster.local:9533",
                                "syncer.gf-sp-f.svc.cluster.local:9533","syncer.gf-sp-g.svc.cluster.local:9533",]
        StoneJobLimit = 64
        [StoneNodeCfg.PieceConfig]
            Shards = 0
            [StoneNodeCfg.PieceConfig.Store]
                Storage = "s3"
                BucketURL = "https://s3.ap-northeast-1.amazonaws.com/tf-nodereal-dev-greenfield-sp-d"
                MaxRetries = 5
                TestMode = true
                NoSignRequest = false
                TlsInsecureSkipVerify = false
kind: ConfigMap
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: config-stonenode-fcf8d8tcc6
  namespace: gf-sp-d
---
apiVersion: v1
data:
  config.toml: |
    Service = [
      "Syncer",
    ]

    [SyncerCfg]
        StorageProvider = "bnb-sp"
        Address = "0.0.0.0:9533"
        MetaDBType = "mysql"
        [SyncerCfg.PieceConfig.Store]
            Storage = "s3"
            BucketURL = "https://s3.ap-northeast-1.amazonaws.com/tf-nodereal-dev-greenfield-sp-d"
            MaxRetries = 5
            TestMode = true
            NoSignRequest = false
            TlsInsecureSkipVerify = false
        [SyncerCfg.MetaSqlDBConfig]
            Address = "greenfield-sp-dev-d-cluster.cluster-cnvhwydws6wc.ap-northeast-1.rds.amazonaws.com:3306"
            Database = "meta_db"
kind: ConfigMap
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: config-syncer-kfmk46c2th
  namespace: gf-sp-d
---
apiVersion: v1
data:
  config.toml: |
    Service = [
      "Uploader", "Downloader", "Challenge",
    ]

    [UploaderCfg]
        StorageProvider = "bnb-sp"
        Address = "0.0.0.0:9133"
        StoneHubServiceAddress = "stonehub:9333"
        MetaDBType = "mysql"
        [UploaderCfg.PieceStoreConfig]
            Shards = 0
            [UploaderCfg.PieceStoreConfig.Store]
                Storage = "S3"
                BucketURL = "https://s3.ap-northeast-1.amazonaws.com/tf-nodereal-dev-greenfield-sp-d"
                MaxRetries = 5
                TestMode = true
                NoSignRequest = false
                TlsInsecureSkipVerify = false
        [UploaderCfg.MetaSqlDBConfig]
            Address = "greenfield-sp-dev-d-cluster.cluster-cnvhwydws6wc.ap-northeast-1.rds.amazonaws.com:3306"
            Database = "meta_db"

    [DownloaderCfg]
        Address = "0.0.0.0:9233"
        [DownloaderCfg.PieceStoreConfig]
            Shards = 0
            [DownloaderCfg.PieceStoreConfig.Store]
                Storage = "S3"
                BucketURL = "https://s3.ap-northeast-1.amazonaws.com/tf-nodereal-dev-greenfield-sp-d"
                MaxRetries = 5
                TestMode = true
                NoSignRequest = false
                TlsInsecureSkipVerify = false

    [ChallengeCfg]
        Address = "0.0.0.0:9033"
        StorageProvider = "bnb-sp"
        MetaDBType = "mysql"
        [ChallengeCfg.MetaSqlDBConfig]
            Address = "greenfield-sp-dev-d-cluster.cluster-cnvhwydws6wc.ap-northeast-1.rds.amazonaws.com:3306"
            Database = "meta_db"
        [ChallengeCfg.PieceConfig]
            Shards = 0
            [ChallengeCfg.PieceConfig.Store]
                Storage = "s3"
                BucketURL = "https://s3.ap-northeast-1.amazonaws.com/tf-nodereal-dev-greenfield-sp-d"
                MaxRetries = 5
                TestMode = true
                NoSignRequest = false
                TlsInsecureSkipVerify = false
kind: ConfigMap
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: config-uploader-downloader-challenge-24tmkh4ctb
  namespace: gf-sp-d
---
apiVersion: v1
data:
  config.toml: |
    Service = [
      "Gateway",
    ]

    [GatewayCfg]
        Address = "0.0.0.0:9033"
        Domain = "gf-sp-e-bk.dev.nodereal.cc"
        UploaderServiceAddress = "uploader:9133"
        DownloaderServiceAddress = "downloader:9233"
kind: ConfigMap
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: config-gateway-9tdkcmcmdh
  namespace: gf-sp-e
---
apiVersion: v1
data:
  config.toml: |
    Service = [
      "StoneHub",
    ]

    [StoneHubCfg]
    StorageProvider = "bnb-sp"
    Address = "0.0.0.0:9333"
    JobDBType = "mysql"
    MetaDBType = "mysql"
    [StoneHubCfg.JobSqlDBConfig]
        Address = "greenfield-sp-dev-e-cluster.cluster-cnvhwydws6wc.ap-northeast-1.rds.amazonaws.com:3306"
        Database = "job_db"
    [StoneHubCfg.MetaSqlDBConfig]
        Address = "greenfield-sp-dev-e-cluster.cluster-cnvhwydws6wc.ap-northeast-1.rds.amazonaws.com:3306"
        Database = "meta_db"
kind: ConfigMap
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: config-stonehub-t6h62ftd7c
  namespace: gf-sp-e
---
apiVersion: v1
data:
  config.toml: |
    Service = [
      "StoneNode",
    ]

    [StoneNodeCfg]
        StorageProvider = "bnb-sp"
        Address = "0.0.0.0:9433"
        StoneHubServiceAddress = "stonehub:9333"
        SyncerServiceAddress = ["syncer.gf-sp-a.svc.cluster.local:9533","syncer.gf-sp-b.svc.cluster.local:9533",
                                "syncer.gf-sp-c.svc.cluster.local:9533","syncer.gf-sp-d.svc.cluster.local:9533",
                                "syncer.gf-sp-f.svc.cluster.local:9533","syncer.gf-sp-g.svc.cluster.local:9533",]
        StoneJobLimit = 64
        [StoneNodeCfg.PieceConfig]
            Shards = 0
            [StoneNodeCfg.PieceConfig.Store]
                Storage = "s3"
                BucketURL = "https://s3.ap-northeast-1.amazonaws.com/tf-nodereal-dev-greenfield-sp-e"
                MaxRetries = 5
                TestMode = true
                NoSignRequest = false
                TlsInsecureSkipVerify = false
kind: ConfigMap
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: config-stonenode-9h7k5k992g
  namespace: gf-sp-e
---
apiVersion: v1
data:
  config.toml: |
    Service = [
      "Syncer",
    ]

    [SyncerCfg]
        StorageProvider = "bnb-sp"
        Address = "0.0.0.0:9533"
        MetaDBType = "mysql"
        [SyncerCfg.PieceConfig.Store]
            Storage = "s3"
            BucketURL = "https://s3.ap-northeast-1.amazonaws.com/tf-nodereal-dev-greenfield-sp-e"
            MaxRetries = 5
            TestMode = true
            NoSignRequest = false
            TlsInsecureSkipVerify = false
        [SyncerCfg.MetaSqlDBConfig]
            Address = "greenfield-sp-dev-e-cluster.cluster-cnvhwydws6wc.ap-northeast-1.rds.amazonaws.com:3306"
            Database = "meta_db"
kind: ConfigMap
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: config-syncer-9fm2f44m2d
  namespace: gf-sp-e
---
apiVersion: v1
data:
  config.toml: |
    Service = [
      "Uploader", "Downloader", "Challenge",
    ]

    [UploaderCfg]
        StorageProvider = "bnb-sp"
        Address = "0.0.0.0:9133"
        StoneHubServiceAddress = "stonehub:9333"
        MetaDBType = "mysql"
        [UploaderCfg.PieceStoreConfig]
            Shards = 0
            [UploaderCfg.PieceStoreConfig.Store]
                Storage = "S3"
                BucketURL = "https://s3.ap-northeast-1.amazonaws.com/tf-nodereal-dev-greenfield-sp-e"
                MaxRetries = 5
                TestMode = true
                NoSignRequest = false
                TlsInsecureSkipVerify = false
        [UploaderCfg.MetaSqlDBConfig]
            Address = "greenfield-sp-dev-e-cluster.cluster-cnvhwydws6wc.ap-northeast-1.rds.amazonaws.com:3306"
            Database = "meta_db"

    [DownloaderCfg]
        Address = "0.0.0.0:9233"
        [DownloaderCfg.PieceStoreConfig]
            Shards = 0
            [DownloaderCfg.PieceStoreConfig.Store]
                Storage = "S3"
                BucketURL = "https://s3.ap-northeast-1.amazonaws.com/tf-nodereal-dev-greenfield-sp-e"
                MaxRetries = 5
                TestMode = true
                NoSignRequest = false
                TlsInsecureSkipVerify = false

    [ChallengeCfg]
        Address = "0.0.0.0:9033"
        StorageProvider = "bnb-sp"
        MetaDBType = "mysql"
        [ChallengeCfg.MetaSqlDBConfig]
            Address = "greenfield-sp-dev-e-cluster.cluster-cnvhwydws6wc.ap-northeast-1.rds.amazonaws.com:3306"
            Database = "meta_db"
        [ChallengeCfg.PieceConfig]
            Shards = 0
            [ChallengeCfg.PieceConfig.Store]
                Storage = "s3"
                BucketURL = "https://s3.ap-northeast-1.amazonaws.com/tf-nodereal-dev-greenfield-sp-e"
                MaxRetries = 5
                TestMode = true
                NoSignRequest = false
                TlsInsecureSkipVerify = false
kind: ConfigMap
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: config-uploader-downloader-challenge-mbhktf9d25
  namespace: gf-sp-e
---
apiVersion: v1
data:
  config.toml: |
    Service = [
      "Gateway",
    ]

    [GatewayCfg]
        Address = "0.0.0.0:9033"
        Domain = "gf-sp-f-bk.dev.nodereal.cc"
        UploaderServiceAddress = "uploader:9133"
        DownloaderServiceAddress = "downloader:9233"
kind: ConfigMap
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: config-gateway-d94h7mdhh9
  namespace: gf-sp-f
---
apiVersion: v1
data:
  config.toml: |
    Service = [
      "StoneHub",
    ]

    [StoneHubCfg]
    StorageProvider = "bnb-sp"
    Address = "0.0.0.0:9333"
    JobDBType = "mysql"
    MetaDBType = "mysql"
    [StoneHubCfg.JobSqlDBConfig]
        Address = "greenfield-sp-dev-f-cluster.cluster-cnvhwydws6wc.ap-northeast-1.rds.amazonaws.com:3306"
        Database = "job_db"
    [StoneHubCfg.MetaSqlDBConfig]
        Address = "greenfield-sp-dev-f-cluster.cluster-cnvhwydws6wc.ap-northeast-1.rds.amazonaws.com:3306"
        Database = "meta_db"
kind: ConfigMap
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: config-stonehub-k99dfc6dfk
  namespace: gf-sp-f
---
apiVersion: v1
data:
  config.toml: |
    Service = [
      "StoneNode",
    ]

    [StoneNodeCfg]
        StorageProvider = "bnb-sp"
        Address = "0.0.0.0:9433"
        StoneHubServiceAddress = "stonehub:9333"
        SyncerServiceAddress = ["syncer.gf-sp-a.svc.cluster.local:9533","syncer.gf-sp-b.svc.cluster.local:9533",
                                "syncer.gf-sp-c.svc.cluster.local:9533","syncer.gf-sp-d.svc.cluster.local:9533",
                                "syncer.gf-sp-e.svc.cluster.local:9533","syncer.gf-sp-g.svc.cluster.local:9533",]
        StoneJobLimit = 64
        [StoneNodeCfg.PieceConfig]
            Shards = 0
            [StoneNodeCfg.PieceConfig.Store]
                Storage = "s3"
                BucketURL = "https://s3.ap-northeast-1.amazonaws.com/tf-nodereal-dev-greenfield-sp-f"
                MaxRetries = 5
                TestMode = true
                NoSignRequest = false
                TlsInsecureSkipVerify = false
kind: ConfigMap
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: config-stonenode-hdbfbc6g9h
  namespace: gf-sp-f
---
apiVersion: v1
data:
  config.toml: |
    Service = [
      "Syncer",
    ]

    [SyncerCfg]
        StorageProvider = "bnb-sp"
        Address = "0.0.0.0:9533"
        MetaDBType = "mysql"
        [SyncerCfg.PieceConfig.Store]
            Storage = "s3"
            BucketURL = "https://s3.ap-northeast-1.amazonaws.com/tf-nodereal-dev-greenfield-sp-f"
            MaxRetries = 5
            TestMode = true
            NoSignRequest = false
            TlsInsecureSkipVerify = false
        [SyncerCfg.MetaSqlDBConfig]
            Address = "greenfield-sp-dev-f-cluster.cluster-cnvhwydws6wc.ap-northeast-1.rds.amazonaws.com:3306"
            Database = "meta_db"
kind: ConfigMap
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: config-syncer-7t7mh2d5dk
  namespace: gf-sp-f
---
apiVersion: v1
data:
  config.toml: |
    Service = [
      "Uploader", "Downloader", "Challenge",
    ]

    [UploaderCfg]
        StorageProvider = "bnb-sp"
        Address = "0.0.0.0:9133"
        StoneHubServiceAddress = "stonehub:9333"
        MetaDBType = "mysql"
        [UploaderCfg.PieceStoreConfig]
            Shards = 0
            [UploaderCfg.PieceStoreConfig.Store]
                Storage = "S3"
                BucketURL = "https://s3.ap-northeast-1.amazonaws.com/tf-nodereal-dev-greenfield-sp-f"
                MaxRetries = 5
                TestMode = true
                NoSignRequest = false
                TlsInsecureSkipVerify = false
        [UploaderCfg.MetaSqlDBConfig]
            Address = "greenfield-sp-dev-f-cluster.cluster-cnvhwydws6wc.ap-northeast-1.rds.amazonaws.com:3306"
            Database = "meta_db"

    [DownloaderCfg]
        Address = "0.0.0.0:9233"
        [DownloaderCfg.PieceStoreConfig]
            Shards = 0
            [DownloaderCfg.PieceStoreConfig.Store]
                Storage = "S3"
                BucketURL = "https://s3.ap-northeast-1.amazonaws.com/tf-nodereal-dev-greenfield-sp-f"
                MaxRetries = 5
                TestMode = true
                NoSignRequest = false
                TlsInsecureSkipVerify = false

    [ChallengeCfg]
        Address = "0.0.0.0:9033"
        StorageProvider = "bnb-sp"
        MetaDBType = "mysql"
        [ChallengeCfg.MetaSqlDBConfig]
            Address = "greenfield-sp-dev-f-cluster.cluster-cnvhwydws6wc.ap-northeast-1.rds.amazonaws.com:3306"
            Database = "meta_db"
        [ChallengeCfg.PieceConfig]
            Shards = 0
            [ChallengeCfg.PieceConfig.Store]
                Storage = "s3"
                BucketURL = "https://s3.ap-northeast-1.amazonaws.com/tf-nodereal-dev-greenfield-sp-f"
                MaxRetries = 5
                TestMode = true
                NoSignRequest = false
                TlsInsecureSkipVerify = false
kind: ConfigMap
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: config-uploader-downloader-challenge-5h9f8d7f4d
  namespace: gf-sp-f
---
apiVersion: v1
data:
  config.toml: |
    Service = [
      "Gateway",
    ]

    [GatewayCfg]
        Address = "0.0.0.0:9033"
        Domain = "gf-sp-g-bk.dev.nodereal.cc"
        UploaderServiceAddress = "uploader:9133"
        DownloaderServiceAddress = "downloader:9233"
kind: ConfigMap
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: config-gateway-9d65ktd8hh
  namespace: gf-sp-g
---
apiVersion: v1
data:
  config.toml: |
    Service = [
      "StoneHub",
    ]

    [StoneHubCfg]
    StorageProvider = "bnb-sp"
    Address = "0.0.0.0:9333"
    JobDBType = "mysql"
    MetaDBType = "mysql"
    [StoneHubCfg.JobSqlDBConfig]
        Address = "greenfield-sp-dev-g-cluster.cluster-cnvhwydws6wc.ap-northeast-1.rds.amazonaws.com:3306"
        Database = "job_db"
    [StoneHubCfg.MetaSqlDBConfig]
        Address = "greenfield-sp-dev-g-cluster.cluster-cnvhwydws6wc.ap-northeast-1.rds.amazonaws.com:3306"
        Database = "meta_db"
kind: ConfigMap
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: config-stonehub-h5887f428k
  namespace: gf-sp-g
---
apiVersion: v1
data:
  config.toml: |
    Service = [
      "StoneNode",
    ]

    [StoneNodeCfg]
        StorageProvider = "bnb-sp"
        Address = "0.0.0.0:9433"
        StoneHubServiceAddress = "stonehub:9333"
        SyncerServiceAddress = ["syncer.gf-sp-a.svc.cluster.local:9533","syncer.gf-sp-b.svc.cluster.local:9533",
                                "syncer.gf-sp-c.svc.cluster.local:9533","syncer.gf-sp-d.svc.cluster.local:9533",
                                "syncer.gf-sp-e.svc.cluster.local:9533","syncer.gf-sp-f.svc.cluster.local:9533",]
        StoneJobLimit = 64
        [StoneNodeCfg.PieceConfig]
            Shards = 0
            [StoneNodeCfg.PieceConfig.Store]
                Storage = "s3"
                BucketURL = "https://s3.ap-northeast-1.amazonaws.com/tf-nodereal-dev-greenfield-sp-g"
                MaxRetries = 5
                TestMode = true
                NoSignRequest = false
                TlsInsecureSkipVerify = false
kind: ConfigMap
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: config-stonenode-gm4kfmc878
  namespace: gf-sp-g
---
apiVersion: v1
data:
  config.toml: |
    Service = [
      "Syncer",
    ]

    [SyncerCfg]
        StorageProvider = "bnb-sp"
        Address = "0.0.0.0:9533"
        MetaDBType = "mysql"
        [SyncerCfg.PieceConfig.Store]
            Storage = "s3"
            BucketURL = "https://s3.ap-northeast-1.amazonaws.com/tf-nodereal-dev-greenfield-sp-g"
            MaxRetries = 5
            TestMode = true
            NoSignRequest = false
            TlsInsecureSkipVerify = false
        [SyncerCfg.MetaSqlDBConfig]
            Address = "greenfield-sp-dev-g-cluster.cluster-cnvhwydws6wc.ap-northeast-1.rds.amazonaws.com:3306"
            Database = "meta_db"
kind: ConfigMap
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: config-syncer-2mff259bfh
  namespace: gf-sp-g
---
apiVersion: v1
data:
  config.toml: |
    Service = [
      "Uploader", "Downloader", "Challenge",
    ]

    [UploaderCfg]
        StorageProvider = "bnb-sp"
        Address = "0.0.0.0:9133"
        StoneHubServiceAddress = "stonehub:9333"
        MetaDBType = "mysql"
        [UploaderCfg.PieceStoreConfig]
            Shards = 0
            [UploaderCfg.PieceStoreConfig.Store]
                Storage = "S3"
                BucketURL = "https://s3.ap-northeast-1.amazonaws.com/tf-nodereal-dev-greenfield-sp-g"
                MaxRetries = 5
                TestMode = true
                NoSignRequest = false
                TlsInsecureSkipVerify = false
        [UploaderCfg.MetaSqlDBConfig]
            Address = "greenfield-sp-dev-g-cluster.cluster-cnvhwydws6wc.ap-northeast-1.rds.amazonaws.com:3306"
            Database = "meta_db"

    [DownloaderCfg]
        Address = "0.0.0.0:9233"
        [DownloaderCfg.PieceStoreConfig]
            Shards = 0
            [DownloaderCfg.PieceStoreConfig.Store]
                Storage = "S3"
                BucketURL = "https://s3.ap-northeast-1.amazonaws.com/tf-nodereal-dev-greenfield-sp-g"
                MaxRetries = 5
                TestMode = true
                NoSignRequest = false
                TlsInsecureSkipVerify = false

    [ChallengeCfg]
        Address = "0.0.0.0:9033"
        StorageProvider = "bnb-sp"
        MetaDBType = "mysql"
        [ChallengeCfg.MetaSqlDBConfig]
            Address = "greenfield-sp-dev-g-cluster.cluster-cnvhwydws6wc.ap-northeast-1.rds.amazonaws.com:3306"
            Database = "meta_db"
        [ChallengeCfg.PieceConfig]
            Shards = 0
            [ChallengeCfg.PieceConfig.Store]
                Storage = "s3"
                BucketURL = "https://s3.ap-northeast-1.amazonaws.com/tf-nodereal-dev-greenfield-sp-g"
                MaxRetries = 5
                TestMode = true
                NoSignRequest = false
                TlsInsecureSkipVerify = false
kind: ConfigMap
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: config-uploader-downloader-challenge-65tf7hd4cb
  namespace: gf-sp-g
---
apiVersion: v1
data:
  .dockerconfigjson: eyJhdXRocyI6eyJnaGNyLmlvIjp7InVzZXJuYW1lIjoiYm5iLXBrZyIsInBhc3N3b3JkIjoiZ2hwX2tlSnhVVno1T0JWTDA5MmZ3N3JFR1BVemJSYzFObTNVdVNDbyIsImF1dGgiOiJZbTVpTFhCclp6cG5hSEJmYTJWS2VGVldlalZQUWxaTU1Ea3labmMzY2tWSFVGVjZZbEpqTVU1dE0xVjFVME52In19fQ==
kind: Secret
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: image-pull
  namespace: gf-sp-a
type: kubernetes.io/dockerconfigjson
---
apiVersion: v1
data:
  JDP: MDJhTVU0bWlHY2RHWlJmYg==
  JDU: Z3JlZW5maWVsZA==
  MDP: MDJhTVU0bWlHY2RHWlJmYg==
  MDU: Z3JlZW5maWVsZA==
kind: Secret
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: sp-db
  namespace: gf-sp-a
type: Opaque
---
apiVersion: v1
data:
  AK: QUtJQVZCTE1XN0FVQU5BS1FHM0c=
  SK: U1MzVHQ1WGNKdUhuY0s0OWlYNkhwTmNlRTQrekZhdytnd0ozVmtEMw==
  ST: ""
kind: Secret
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: sp-s3
  namespace: gf-sp-a
type: Opaque
---
apiVersion: v1
data:
  .dockerconfigjson: eyJhdXRocyI6eyJnaGNyLmlvIjp7InVzZXJuYW1lIjoiYm5iLXBrZyIsInBhc3N3b3JkIjoiZ2hwX2tlSnhVVno1T0JWTDA5MmZ3N3JFR1BVemJSYzFObTNVdVNDbyIsImF1dGgiOiJZbTVpTFhCclp6cG5hSEJmYTJWS2VGVldlalZQUWxaTU1Ea3labmMzY2tWSFVGVjZZbEpqTVU1dE0xVjFVME52In19fQ==
kind: Secret
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: image-pull
  namespace: gf-sp-b
type: kubernetes.io/dockerconfigjson
---
apiVersion: v1
data:
  JDP: MDJhTVU0bWlHY2RHWlJmYg==
  JDU: Z3JlZW5maWVsZA==
  MDP: MDJhTVU0bWlHY2RHWlJmYg==
  MDU: Z3JlZW5maWVsZA==
kind: Secret
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: sp-db
  namespace: gf-sp-b
type: Opaque
---
apiVersion: v1
data:
  AK: QUtJQVZCTE1XN0FVTVNYRzZBSEY=
  SK: aXlXeHdGb1pPMzUwMUFHaUYrZXgydlBlMHVDakpaS1R3UFZ4K3RsTw==
  ST: ""
kind: Secret
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: sp-s3
  namespace: gf-sp-b
type: Opaque
---
apiVersion: v1
data:
  .dockerconfigjson: eyJhdXRocyI6eyJnaGNyLmlvIjp7InVzZXJuYW1lIjoiYm5iLXBrZyIsInBhc3N3b3JkIjoiZ2hwX2tlSnhVVno1T0JWTDA5MmZ3N3JFR1BVemJSYzFObTNVdVNDbyIsImF1dGgiOiJZbTVpTFhCclp6cG5hSEJmYTJWS2VGVldlalZQUWxaTU1Ea3labmMzY2tWSFVGVjZZbEpqTVU1dE0xVjFVME52In19fQ==
kind: Secret
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: image-pull
  namespace: gf-sp-c
type: kubernetes.io/dockerconfigjson
---
apiVersion: v1
data:
  JDP: MDJhTVU0bWlHY2RHWlJmYg==
  JDU: Z3JlZW5maWVsZA==
  MDP: MDJhTVU0bWlHY2RHWlJmYg==
  MDU: Z3JlZW5maWVsZA==
kind: Secret
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: sp-db
  namespace: gf-sp-c
type: Opaque
---
apiVersion: v1
data:
  AK: QUtJQVZCTE1XN0FVRE0yVkhES0k=
  SK: NE9GcVFBWW9ZUWVYQ2ppOVpMR0JHWU9RVTFyeVBwa3QrQ3BUa0REaw==
  ST: ""
kind: Secret
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: sp-s3
  namespace: gf-sp-c
type: Opaque
---
apiVersion: v1
data:
  .dockerconfigjson: eyJhdXRocyI6eyJnaGNyLmlvIjp7InVzZXJuYW1lIjoiYm5iLXBrZyIsInBhc3N3b3JkIjoiZ2hwX2tlSnhVVno1T0JWTDA5MmZ3N3JFR1BVemJSYzFObTNVdVNDbyIsImF1dGgiOiJZbTVpTFhCclp6cG5hSEJmYTJWS2VGVldlalZQUWxaTU1Ea3labmMzY2tWSFVGVjZZbEpqTVU1dE0xVjFVME52In19fQ==
kind: Secret
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: image-pull
  namespace: gf-sp-devops
type: kubernetes.io/dockerconfigjson
---
apiVersion: v1
data:
  JDP: MDJhTVU0bWlHY2RHWlJmYg==
  JDU: Z3JlZW5maWVsZA==
  MDP: MDJhTVU0bWlHY2RHWlJmYg==
  MDU: Z3JlZW5maWVsZA==
kind: Secret
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: sp-db
  namespace: gf-sp-devops
type: Opaque
---
apiVersion: v1
data:
  AK: QUtJQVZCTE1XN0FVTVRLVExQR1o=
  SK: QUtwM3R0SzRKVmRxWjFReTd5K1JKdUFLQ29OQVRpNHpxdzZoZDkrQQ==
  ST: ""
kind: Secret
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: sp-s3
  namespace: gf-sp-devops
type: Opaque
---
apiVersion: v1
data:
  .dockerconfigjson: eyJhdXRocyI6eyJnaGNyLmlvIjp7InVzZXJuYW1lIjoiYm5iLXBrZyIsInBhc3N3b3JkIjoiZ2hwX2tlSnhVVno1T0JWTDA5MmZ3N3JFR1BVemJSYzFObTNVdVNDbyIsImF1dGgiOiJZbTVpTFhCclp6cG5hSEJmYTJWS2VGVldlalZQUWxaTU1Ea3labmMzY2tWSFVGVjZZbEpqTVU1dE0xVjFVME52In19fQ==
kind: Secret
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: image-pull
  namespace: gf-sp-d
type: kubernetes.io/dockerconfigjson
---
apiVersion: v1
data:
  JDP: MDJhTVU0bWlHY2RHWlJmYg==
  JDU: Z3JlZW5maWVsZA==
  MDP: MDJhTVU0bWlHY2RHWlJmYg==
  MDU: Z3JlZW5maWVsZA==
kind: Secret
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: sp-db
  namespace: gf-sp-d
type: Opaque
---
apiVersion: v1
data:
  AK: QUtJQVZCTE1XN0FVSFVDSlE2Nlc=
  SK: WXBIZEU5WlFVaER1YlYzWHNDWFc4QTZRYkRXbFdNZWZLVCtGS2I1Qw==
  ST: ""
kind: Secret
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: sp-s3
  namespace: gf-sp-d
type: Opaque
---
apiVersion: v1
data:
  .dockerconfigjson: eyJhdXRocyI6eyJnaGNyLmlvIjp7InVzZXJuYW1lIjoiYm5iLXBrZyIsInBhc3N3b3JkIjoiZ2hwX2tlSnhVVno1T0JWTDA5MmZ3N3JFR1BVemJSYzFObTNVdVNDbyIsImF1dGgiOiJZbTVpTFhCclp6cG5hSEJmYTJWS2VGVldlalZQUWxaTU1Ea3labmMzY2tWSFVGVjZZbEpqTVU1dE0xVjFVME52In19fQ==
kind: Secret
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: image-pull
  namespace: gf-sp-e
type: kubernetes.io/dockerconfigjson
---
apiVersion: v1
data:
  JDP: MDJhTVU0bWlHY2RHWlJmYg==
  JDU: Z3JlZW5maWVsZA==
  MDP: MDJhTVU0bWlHY2RHWlJmYg==
  MDU: Z3JlZW5maWVsZA==
kind: Secret
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: sp-db
  namespace: gf-sp-e
type: Opaque
---
apiVersion: v1
data:
  AK: QUtJQVZCTE1XN0FVT1UzTE5ONlI=
  SK: WHRsamx3a0RCejRiSlFpUVYyT1pQYjhXcTIyMElCcjV5REpKSlZySg==
  ST: ""
kind: Secret
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: sp-s3
  namespace: gf-sp-e
type: Opaque
---
apiVersion: v1
data:
  .dockerconfigjson: eyJhdXRocyI6eyJnaGNyLmlvIjp7InVzZXJuYW1lIjoiYm5iLXBrZyIsInBhc3N3b3JkIjoiZ2hwX2tlSnhVVno1T0JWTDA5MmZ3N3JFR1BVemJSYzFObTNVdVNDbyIsImF1dGgiOiJZbTVpTFhCclp6cG5hSEJmYTJWS2VGVldlalZQUWxaTU1Ea3labmMzY2tWSFVGVjZZbEpqTVU1dE0xVjFVME52In19fQ==
kind: Secret
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: image-pull
  namespace: gf-sp-f
type: kubernetes.io/dockerconfigjson
---
apiVersion: v1
data:
  JDP: MDJhTVU0bWlHY2RHWlJmYg==
  JDU: Z3JlZW5maWVsZA==
  MDP: MDJhTVU0bWlHY2RHWlJmYg==
  MDU: Z3JlZW5maWVsZA==
kind: Secret
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: sp-db
  namespace: gf-sp-f
type: Opaque
---
apiVersion: v1
data:
  AK: QUtJQVZCTE1XN0FVSEdSNllSU1c=
  SK: dlpRV3RMVUF5VG9XRTg5WkVpOEJiT0MrS2s5cjBhd28wNjUybm4yZw==
  ST: ""
kind: Secret
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: sp-s3
  namespace: gf-sp-f
type: Opaque
---
apiVersion: v1
data:
  .dockerconfigjson: eyJhdXRocyI6eyJnaGNyLmlvIjp7InVzZXJuYW1lIjoiYm5iLXBrZyIsInBhc3N3b3JkIjoiZ2hwX2tlSnhVVno1T0JWTDA5MmZ3N3JFR1BVemJSYzFObTNVdVNDbyIsImF1dGgiOiJZbTVpTFhCclp6cG5hSEJmYTJWS2VGVldlalZQUWxaTU1Ea3labmMzY2tWSFVGVjZZbEpqTVU1dE0xVjFVME52In19fQ==
kind: Secret
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: image-pull
  namespace: gf-sp-g
type: kubernetes.io/dockerconfigjson
---
apiVersion: v1
data:
  JDP: MDJhTVU0bWlHY2RHWlJmYg==
  JDU: Z3JlZW5maWVsZA==
  MDP: MDJhTVU0bWlHY2RHWlJmYg==
  MDU: Z3JlZW5maWVsZA==
kind: Secret
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: sp-db
  namespace: gf-sp-g
type: Opaque
---
apiVersion: v1
data:
  AK: QUtJQVZCTE1XN0FVTk9FTTVaRVo=
  SK: WThYL3JkVWxWT0RaNXdzc1RLWkRvS0xjVFc5dXliMXpVcjdVc2Ftaw==
  ST: ""
kind: Secret
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: sp-s3
  namespace: gf-sp-g
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: challenge
  namespace: gf-sp-a
spec:
  ports:
  - name: challenge
    port: 9033
    targetPort: 9033
  selector:
    app: uploader-downloader-challenge
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: downloader
  namespace: gf-sp-a
spec:
  ports:
  - name: downloader
    port: 9233
    targetPort: 9233
  selector:
    app: uploader-downloader-challenge
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: gateway
  namespace: gf-sp-a
spec:
  ports:
  - name: gateway
    port: 9033
    targetPort: 9033
  selector:
    app: gateway
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: stonehub
  namespace: gf-sp-a
spec:
  ports:
  - name: stonehub
    port: 9333
    targetPort: 9333
  selector:
    app: stonehub
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: stonenode
  namespace: gf-sp-a
spec:
  ports:
  - name: stonenode
    port: 9433
    targetPort: 9433
  selector:
    app: stonenode
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: syncer
  namespace: gf-sp-a
spec:
  ports:
  - name: syncer
    port: 9533
    targetPort: 9533
  selector:
    app: syncer
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: uploader
  namespace: gf-sp-a
spec:
  ports:
  - name: uploader
    port: 9133
    targetPort: 9133
  selector:
    app: uploader-downloader-challenge
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: challenge
  namespace: gf-sp-b
spec:
  ports:
  - name: challenge
    port: 9033
    targetPort: 9033
  selector:
    app: uploader-downloader-challenge
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: downloader
  namespace: gf-sp-b
spec:
  ports:
  - name: downloader
    port: 9233
    targetPort: 9233
  selector:
    app: uploader-downloader-challenge
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: gateway
  namespace: gf-sp-b
spec:
  ports:
  - name: gateway
    port: 9033
    targetPort: 9033
  selector:
    app: gateway
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: stonehub
  namespace: gf-sp-b
spec:
  ports:
  - name: stonehub
    port: 9333
    targetPort: 9333
  selector:
    app: stonehub
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: stonenode
  namespace: gf-sp-b
spec:
  ports:
  - name: stonenode
    port: 9433
    targetPort: 9433
  selector:
    app: stonenode
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: syncer
  namespace: gf-sp-b
spec:
  ports:
  - name: syncer
    port: 9533
    targetPort: 9533
  selector:
    app: syncer
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: uploader
  namespace: gf-sp-b
spec:
  ports:
  - name: uploader
    port: 9133
    targetPort: 9133
  selector:
    app: uploader-downloader-challenge
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: challenge
  namespace: gf-sp-c
spec:
  ports:
  - name: challenge
    port: 9033
    targetPort: 9033
  selector:
    app: uploader-downloader-challenge
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: downloader
  namespace: gf-sp-c
spec:
  ports:
  - name: downloader
    port: 9233
    targetPort: 9233
  selector:
    app: uploader-downloader-challenge
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: gateway
  namespace: gf-sp-c
spec:
  ports:
  - name: gateway
    port: 9033
    targetPort: 9033
  selector:
    app: gateway
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: stonehub
  namespace: gf-sp-c
spec:
  ports:
  - name: stonehub
    port: 9333
    targetPort: 9333
  selector:
    app: stonehub
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: stonenode
  namespace: gf-sp-c
spec:
  ports:
  - name: stonenode
    port: 9433
    targetPort: 9433
  selector:
    app: stonenode
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: syncer
  namespace: gf-sp-c
spec:
  ports:
  - name: syncer
    port: 9533
    targetPort: 9533
  selector:
    app: syncer
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: uploader
  namespace: gf-sp-c
spec:
  ports:
  - name: uploader
    port: 9133
    targetPort: 9133
  selector:
    app: uploader-downloader-challenge
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: challenge
  namespace: gf-sp-devops
spec:
  ports:
  - name: challenge
    port: 9033
    targetPort: 9033
  selector:
    app: uploader-downloader-challenge
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: downloader
  namespace: gf-sp-devops
spec:
  ports:
  - name: downloader
    port: 9233
    targetPort: 9233
  selector:
    app: uploader-downloader-challenge
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: gateway
  namespace: gf-sp-devops
spec:
  ports:
  - name: gateway
    port: 9033
    targetPort: 9033
  selector:
    app: gateway
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: stonehub
  namespace: gf-sp-devops
spec:
  ports:
  - name: stonehub
    port: 9333
    targetPort: 9333
  selector:
    app: stonehub
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: stonenode
  namespace: gf-sp-devops
spec:
  ports:
  - name: stonenode
    port: 9433
    targetPort: 9433
  selector:
    app: stonenode
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: syncer
  namespace: gf-sp-devops
spec:
  ports:
  - name: syncer
    port: 9533
    targetPort: 9533
  selector:
    app: syncer
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: uploader
  namespace: gf-sp-devops
spec:
  ports:
  - name: uploader
    port: 9133
    targetPort: 9133
  selector:
    app: uploader-downloader-challenge
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: challenge
  namespace: gf-sp-d
spec:
  ports:
  - name: challenge
    port: 9033
    targetPort: 9033
  selector:
    app: uploader-downloader-challenge
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: downloader
  namespace: gf-sp-d
spec:
  ports:
  - name: downloader
    port: 9233
    targetPort: 9233
  selector:
    app: uploader-downloader-challenge
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: gateway
  namespace: gf-sp-d
spec:
  ports:
  - name: gateway
    port: 9033
    targetPort: 9033
  selector:
    app: gateway
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: stonehub
  namespace: gf-sp-d
spec:
  ports:
  - name: stonehub
    port: 9333
    targetPort: 9333
  selector:
    app: stonehub
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: stonenode
  namespace: gf-sp-d
spec:
  ports:
  - name: stonenode
    port: 9433
    targetPort: 9433
  selector:
    app: stonenode
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: syncer
  namespace: gf-sp-d
spec:
  ports:
  - name: syncer
    port: 9533
    targetPort: 9533
  selector:
    app: syncer
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: uploader
  namespace: gf-sp-d
spec:
  ports:
  - name: uploader
    port: 9133
    targetPort: 9133
  selector:
    app: uploader-downloader-challenge
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: challenge
  namespace: gf-sp-e
spec:
  ports:
  - name: challenge
    port: 9033
    targetPort: 9033
  selector:
    app: uploader-downloader-challenge
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: downloader
  namespace: gf-sp-e
spec:
  ports:
  - name: downloader
    port: 9233
    targetPort: 9233
  selector:
    app: uploader-downloader-challenge
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: gateway
  namespace: gf-sp-e
spec:
  ports:
  - name: gateway
    port: 9033
    targetPort: 9033
  selector:
    app: gateway
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: stonehub
  namespace: gf-sp-e
spec:
  ports:
  - name: stonehub
    port: 9333
    targetPort: 9333
  selector:
    app: stonehub
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: stonenode
  namespace: gf-sp-e
spec:
  ports:
  - name: stonenode
    port: 9433
    targetPort: 9433
  selector:
    app: stonenode
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: syncer
  namespace: gf-sp-e
spec:
  ports:
  - name: syncer
    port: 9533
    targetPort: 9533
  selector:
    app: syncer
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: uploader
  namespace: gf-sp-e
spec:
  ports:
  - name: uploader
    port: 9133
    targetPort: 9133
  selector:
    app: uploader-downloader-challenge
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: challenge
  namespace: gf-sp-f
spec:
  ports:
  - name: challenge
    port: 9033
    targetPort: 9033
  selector:
    app: uploader-downloader-challenge
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: downloader
  namespace: gf-sp-f
spec:
  ports:
  - name: downloader
    port: 9233
    targetPort: 9233
  selector:
    app: uploader-downloader-challenge
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: gateway
  namespace: gf-sp-f
spec:
  ports:
  - name: gateway
    port: 9033
    targetPort: 9033
  selector:
    app: gateway
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: stonehub
  namespace: gf-sp-f
spec:
  ports:
  - name: stonehub
    port: 9333
    targetPort: 9333
  selector:
    app: stonehub
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: stonenode
  namespace: gf-sp-f
spec:
  ports:
  - name: stonenode
    port: 9433
    targetPort: 9433
  selector:
    app: stonenode
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: syncer
  namespace: gf-sp-f
spec:
  ports:
  - name: syncer
    port: 9533
    targetPort: 9533
  selector:
    app: syncer
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: uploader
  namespace: gf-sp-f
spec:
  ports:
  - name: uploader
    port: 9133
    targetPort: 9133
  selector:
    app: uploader-downloader-challenge
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: challenge
  namespace: gf-sp-g
spec:
  ports:
  - name: challenge
    port: 9033
    targetPort: 9033
  selector:
    app: uploader-downloader-challenge
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: downloader
  namespace: gf-sp-g
spec:
  ports:
  - name: downloader
    port: 9233
    targetPort: 9233
  selector:
    app: uploader-downloader-challenge
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: gateway
  namespace: gf-sp-g
spec:
  ports:
  - name: gateway
    port: 9033
    targetPort: 9033
  selector:
    app: gateway
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: stonehub
  namespace: gf-sp-g
spec:
  ports:
  - name: stonehub
    port: 9333
    targetPort: 9333
  selector:
    app: stonehub
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: stonenode
  namespace: gf-sp-g
spec:
  ports:
  - name: stonenode
    port: 9433
    targetPort: 9433
  selector:
    app: stonenode
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: syncer
  namespace: gf-sp-g
spec:
  ports:
  - name: syncer
    port: 9533
    targetPort: 9533
  selector:
    app: syncer
    biz: storage-provider
    team: greenfield
---
apiVersion: v1
kind: Service
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: uploader
  namespace: gf-sp-g
spec:
  ports:
  - name: uploader
    port: 9133
    targetPort: 9133
  selector:
    app: uploader-downloader-challenge
    biz: storage-provider
    team: greenfield
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: gateway
  namespace: gf-sp-a
spec:
  replicas: 2
  selector:
    matchLabels:
      app: gateway
      biz: storage-provider
      team: greenfield
  template:
    metadata:
      labels:
        app: gateway
        biz: storage-provider
        team: greenfield
    spec:
      containers:
      - image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.1-fix
        name: gateway
        ports:
        - containerPort: 9033
          name: gateway
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "2"
            memory: 4Gi
        volumeMounts:
        - mountPath: /config
          name: config
      imagePullSecrets:
      - name: image-pull
      volumes:
      - configMap:
          name: config-gateway-c7fghg59km
        name: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: stonenode
  namespace: gf-sp-a
spec:
  replicas: 2
  selector:
    matchLabels:
      app: stonenode
      biz: storage-provider
      team: greenfield
  template:
    metadata:
      labels:
        app: stonenode
        biz: storage-provider
        team: greenfield
    spec:
      containers:
      - env:
        - name: AWS_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: AK
              name: sp-s3
        - name: AWS_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: SK
              name: sp-s3
        - name: AWS_SESSION_TOKEN
          valueFrom:
            secretKeyRef:
              key: ST
              name: sp-s3
        image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.1
        name: stonenode
        ports:
        - containerPort: 9433
          name: stonenode
        resources:
          limits:
            cpu: "2"
            memory: 8Gi
          requests:
            cpu: "2"
            memory: 8Gi
        volumeMounts:
        - mountPath: /config
          name: config
      imagePullSecrets:
      - name: image-pull
      volumes:
      - configMap:
          name: config-stonenode-c65b7628hd
        name: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: syncer
  namespace: gf-sp-a
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: syncer
      biz: storage-provider
      team: greenfield
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: syncer
        biz: storage-provider
        team: greenfield
    spec:
      containers:
      - env:
        - name: AWS_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: AK
              name: sp-s3
        - name: AWS_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: SK
              name: sp-s3
        - name: AWS_SESSION_TOKEN
          valueFrom:
            secretKeyRef:
              key: ST
              name: sp-s3
        - name: META_DB_USER
          valueFrom:
            secretKeyRef:
              key: MDU
              name: sp-db
        - name: META_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: MDP
              name: sp-db
        - name: JOB_DB_USER
          valueFrom:
            secretKeyRef:
              key: JDU
              name: sp-db
        - name: JOB_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: JDP
              name: sp-db
        image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.1
        name: syncer
        ports:
        - containerPort: 9533
          name: syncer
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "2"
            memory: 4Gi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /config
          name: config
      imagePullSecrets:
      - name: image-pull
      volumes:
      - configMap:
          name: config-syncer-f55dmbtk9g
        name: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: uploader-downloader-challenge
  namespace: gf-sp-a
spec:
  replicas: 1
  selector:
    matchLabels:
      app: uploader-downloader-challenge
      biz: storage-provider
      team: greenfield
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: uploader-downloader-challenge
        biz: storage-provider
        team: greenfield
    spec:
      containers:
      - env:
        - name: AWS_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: AK
              name: sp-s3
        - name: AWS_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: SK
              name: sp-s3
        - name: AWS_SESSION_TOKEN
          valueFrom:
            secretKeyRef:
              key: ST
              name: sp-s3
        - name: META_DB_USER
          valueFrom:
            secretKeyRef:
              key: MDU
              name: sp-db
        - name: META_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: MDP
              name: sp-db
        image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.1
        name: uploader-downloader-challenge
        ports:
        - containerPort: 9133
          name: uploader
        - containerPort: 9233
          name: downloader
        - containerPort: 9033
          name: challenge
        resources:
          limits:
            cpu: "3"
            memory: 12Gi
          requests:
            cpu: "2"
            memory: 8Gi
        volumeMounts:
        - mountPath: /config
          name: config
      imagePullSecrets:
      - name: image-pull
      volumes:
      - configMap:
          name: config-uploader-downloader-challenge-4mt2kbht5m
        name: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: gateway
  namespace: gf-sp-b
spec:
  replicas: 2
  selector:
    matchLabels:
      app: gateway
      biz: storage-provider
      team: greenfield
  template:
    metadata:
      labels:
        app: gateway
        biz: storage-provider
        team: greenfield
    spec:
      containers:
      - image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.1-fix
        name: gateway
        ports:
        - containerPort: 9033
          name: gateway
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "2"
            memory: 4Gi
        volumeMounts:
        - mountPath: /config
          name: config
      imagePullSecrets:
      - name: image-pull
      volumes:
      - configMap:
          name: config-gateway-d7bckf7g25
        name: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: stonenode
  namespace: gf-sp-b
spec:
  replicas: 2
  selector:
    matchLabels:
      app: stonenode
      biz: storage-provider
      team: greenfield
  template:
    metadata:
      labels:
        app: stonenode
        biz: storage-provider
        team: greenfield
    spec:
      containers:
      - env:
        - name: AWS_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: AK
              name: sp-s3
        - name: AWS_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: SK
              name: sp-s3
        - name: AWS_SESSION_TOKEN
          valueFrom:
            secretKeyRef:
              key: ST
              name: sp-s3
        image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.1
        name: stonenode
        ports:
        - containerPort: 9433
          name: stonenode
        resources:
          limits:
            cpu: "2"
            memory: 8Gi
          requests:
            cpu: "2"
            memory: 8Gi
        volumeMounts:
        - mountPath: /config
          name: config
      imagePullSecrets:
      - name: image-pull
      volumes:
      - configMap:
          name: config-stonenode-427ft5dd99
        name: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: syncer
  namespace: gf-sp-b
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: syncer
      biz: storage-provider
      team: greenfield
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: syncer
        biz: storage-provider
        team: greenfield
    spec:
      containers:
      - env:
        - name: AWS_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: AK
              name: sp-s3
        - name: AWS_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: SK
              name: sp-s3
        - name: AWS_SESSION_TOKEN
          valueFrom:
            secretKeyRef:
              key: ST
              name: sp-s3
        - name: META_DB_USER
          valueFrom:
            secretKeyRef:
              key: MDU
              name: sp-db
        - name: META_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: MDP
              name: sp-db
        - name: JOB_DB_USER
          valueFrom:
            secretKeyRef:
              key: JDU
              name: sp-db
        - name: JOB_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: JDP
              name: sp-db
        image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.1
        name: syncer
        ports:
        - containerPort: 9533
          name: syncer
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "2"
            memory: 4Gi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /config
          name: config
      imagePullSecrets:
      - name: image-pull
      volumes:
      - configMap:
          name: config-syncer-btkbdbthdm
        name: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: uploader-downloader-challenge
  namespace: gf-sp-b
spec:
  replicas: 1
  selector:
    matchLabels:
      app: uploader-downloader-challenge
      biz: storage-provider
      team: greenfield
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: uploader-downloader-challenge
        biz: storage-provider
        team: greenfield
    spec:
      containers:
      - env:
        - name: AWS_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: AK
              name: sp-s3
        - name: AWS_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: SK
              name: sp-s3
        - name: AWS_SESSION_TOKEN
          valueFrom:
            secretKeyRef:
              key: ST
              name: sp-s3
        - name: META_DB_USER
          valueFrom:
            secretKeyRef:
              key: MDU
              name: sp-db
        - name: META_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: MDP
              name: sp-db
        image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.1
        name: uploader-downloader-challenge
        ports:
        - containerPort: 9133
          name: uploader
        - containerPort: 9233
          name: downloader
        - containerPort: 9033
          name: challenge
        resources:
          limits:
            cpu: "3"
            memory: 12Gi
          requests:
            cpu: "2"
            memory: 8Gi
        volumeMounts:
        - mountPath: /config
          name: config
      imagePullSecrets:
      - name: image-pull
      volumes:
      - configMap:
          name: config-uploader-downloader-challenge-42tddtkfgd
        name: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: gateway
  namespace: gf-sp-c
spec:
  replicas: 2
  selector:
    matchLabels:
      app: gateway
      biz: storage-provider
      team: greenfield
  template:
    metadata:
      labels:
        app: gateway
        biz: storage-provider
        team: greenfield
    spec:
      containers:
      - image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.1-fix
        name: gateway
        ports:
        - containerPort: 9033
          name: gateway
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "2"
            memory: 4Gi
        volumeMounts:
        - mountPath: /config
          name: config
      imagePullSecrets:
      - name: image-pull
      volumes:
      - configMap:
          name: config-gateway-8c6bthd6km
        name: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: stonenode
  namespace: gf-sp-c
spec:
  replicas: 2
  selector:
    matchLabels:
      app: stonenode
      biz: storage-provider
      team: greenfield
  template:
    metadata:
      labels:
        app: stonenode
        biz: storage-provider
        team: greenfield
    spec:
      containers:
      - env:
        - name: AWS_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: AK
              name: sp-s3
        - name: AWS_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: SK
              name: sp-s3
        - name: AWS_SESSION_TOKEN
          valueFrom:
            secretKeyRef:
              key: ST
              name: sp-s3
        image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.1
        name: stonenode
        ports:
        - containerPort: 9433
          name: stonenode
        resources:
          limits:
            cpu: "2"
            memory: 8Gi
          requests:
            cpu: "2"
            memory: 8Gi
        volumeMounts:
        - mountPath: /config
          name: config
      imagePullSecrets:
      - name: image-pull
      volumes:
      - configMap:
          name: config-stonenode-h9c84c9688
        name: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: syncer
  namespace: gf-sp-c
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: syncer
      biz: storage-provider
      team: greenfield
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: syncer
        biz: storage-provider
        team: greenfield
    spec:
      containers:
      - env:
        - name: AWS_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: AK
              name: sp-s3
        - name: AWS_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: SK
              name: sp-s3
        - name: AWS_SESSION_TOKEN
          valueFrom:
            secretKeyRef:
              key: ST
              name: sp-s3
        - name: META_DB_USER
          valueFrom:
            secretKeyRef:
              key: MDU
              name: sp-db
        - name: META_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: MDP
              name: sp-db
        - name: JOB_DB_USER
          valueFrom:
            secretKeyRef:
              key: JDU
              name: sp-db
        - name: JOB_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: JDP
              name: sp-db
        image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.1
        name: syncer
        ports:
        - containerPort: 9533
          name: syncer
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "2"
            memory: 4Gi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /config
          name: config
      imagePullSecrets:
      - name: image-pull
      volumes:
      - configMap:
          name: config-syncer-g2gct9km98
        name: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: uploader-downloader-challenge
  namespace: gf-sp-c
spec:
  replicas: 1
  selector:
    matchLabels:
      app: uploader-downloader-challenge
      biz: storage-provider
      team: greenfield
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: uploader-downloader-challenge
        biz: storage-provider
        team: greenfield
    spec:
      containers:
      - env:
        - name: AWS_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: AK
              name: sp-s3
        - name: AWS_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: SK
              name: sp-s3
        - name: AWS_SESSION_TOKEN
          valueFrom:
            secretKeyRef:
              key: ST
              name: sp-s3
        - name: META_DB_USER
          valueFrom:
            secretKeyRef:
              key: MDU
              name: sp-db
        - name: META_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: MDP
              name: sp-db
        image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.1
        name: uploader-downloader-challenge
        ports:
        - containerPort: 9133
          name: uploader
        - containerPort: 9233
          name: downloader
        - containerPort: 9033
          name: challenge
        resources:
          limits:
            cpu: "3"
            memory: 12Gi
          requests:
            cpu: "2"
            memory: 8Gi
        volumeMounts:
        - mountPath: /config
          name: config
      imagePullSecrets:
      - name: image-pull
      volumes:
      - configMap:
          name: config-uploader-downloader-challenge-dtgbk5m895
        name: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: gateway
  namespace: gf-sp-devops
spec:
  replicas: 2
  selector:
    matchLabels:
      app: gateway
      biz: storage-provider
      team: greenfield
  template:
    metadata:
      labels:
        app: gateway
        biz: storage-provider
        team: greenfield
    spec:
      containers:
      - image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.1-fix
        name: gateway
        ports:
        - containerPort: 9033
          name: gateway
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "2"
            memory: 4Gi
        volumeMounts:
        - mountPath: /config
          name: config
      imagePullSecrets:
      - name: image-pull
      volumes:
      - configMap:
          name: config-gateway-4h8tt6fd7g
        name: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: stonenode
  namespace: gf-sp-devops
spec:
  replicas: 2
  selector:
    matchLabels:
      app: stonenode
      biz: storage-provider
      team: greenfield
  template:
    metadata:
      labels:
        app: stonenode
        biz: storage-provider
        team: greenfield
    spec:
      containers:
      - env:
        - name: AWS_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: AK
              name: sp-s3
        - name: AWS_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: SK
              name: sp-s3
        - name: AWS_SESSION_TOKEN
          valueFrom:
            secretKeyRef:
              key: ST
              name: sp-s3
        image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.1
        name: stonenode
        ports:
        - containerPort: 9433
          name: stonenode
        resources:
          limits:
            cpu: "2"
            memory: 8Gi
          requests:
            cpu: "2"
            memory: 8Gi
        volumeMounts:
        - mountPath: /config
          name: config
      imagePullSecrets:
      - name: image-pull
      volumes:
      - configMap:
          name: config-stonenode-6kffh47g8k
        name: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: syncer
  namespace: gf-sp-devops
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: syncer
      biz: storage-provider
      team: greenfield
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: syncer
        biz: storage-provider
        team: greenfield
    spec:
      containers:
      - env:
        - name: AWS_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: AK
              name: sp-s3
        - name: AWS_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: SK
              name: sp-s3
        - name: AWS_SESSION_TOKEN
          valueFrom:
            secretKeyRef:
              key: ST
              name: sp-s3
        - name: META_DB_USER
          valueFrom:
            secretKeyRef:
              key: MDU
              name: sp-db
        - name: META_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: MDP
              name: sp-db
        - name: JOB_DB_USER
          valueFrom:
            secretKeyRef:
              key: JDU
              name: sp-db
        - name: JOB_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: JDP
              name: sp-db
        image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.1
        name: syncer
        ports:
        - containerPort: 9533
          name: syncer
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "2"
            memory: 4Gi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /config
          name: config
      imagePullSecrets:
      - name: image-pull
      volumes:
      - configMap:
          name: config-syncer-kt2gkt44k9
        name: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: uploader-downloader-challenge
  namespace: gf-sp-devops
spec:
  replicas: 1
  selector:
    matchLabels:
      app: uploader-downloader-challenge
      biz: storage-provider
      team: greenfield
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: uploader-downloader-challenge
        biz: storage-provider
        team: greenfield
    spec:
      containers:
      - env:
        - name: AWS_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: AK
              name: sp-s3
        - name: AWS_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: SK
              name: sp-s3
        - name: AWS_SESSION_TOKEN
          valueFrom:
            secretKeyRef:
              key: ST
              name: sp-s3
        - name: META_DB_USER
          valueFrom:
            secretKeyRef:
              key: MDU
              name: sp-db
        - name: META_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: MDP
              name: sp-db
        image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.1
        name: uploader-downloader-challenge
        ports:
        - containerPort: 9133
          name: uploader
        - containerPort: 9233
          name: downloader
        - containerPort: 9033
          name: challenge
        resources:
          limits:
            cpu: "3"
            memory: 12Gi
          requests:
            cpu: "2"
            memory: 8Gi
        volumeMounts:
        - mountPath: /config
          name: config
      imagePullSecrets:
      - name: image-pull
      volumes:
      - configMap:
          name: config-uploader-downloader-challenge-fh4256hkdd
        name: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: gateway
  namespace: gf-sp-d
spec:
  replicas: 2
  selector:
    matchLabels:
      app: gateway
      biz: storage-provider
      team: greenfield
  template:
    metadata:
      labels:
        app: gateway
        biz: storage-provider
        team: greenfield
    spec:
      containers:
      - image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.1-fix
        name: gateway
        ports:
        - containerPort: 9033
          name: gateway
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "2"
            memory: 4Gi
        volumeMounts:
        - mountPath: /config
          name: config
      imagePullSecrets:
      - name: image-pull
      volumes:
      - configMap:
          name: config-gateway-kc4cbffc62
        name: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: stonenode
  namespace: gf-sp-d
spec:
  replicas: 2
  selector:
    matchLabels:
      app: stonenode
      biz: storage-provider
      team: greenfield
  template:
    metadata:
      labels:
        app: stonenode
        biz: storage-provider
        team: greenfield
    spec:
      containers:
      - env:
        - name: AWS_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: AK
              name: sp-s3
        - name: AWS_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: SK
              name: sp-s3
        - name: AWS_SESSION_TOKEN
          valueFrom:
            secretKeyRef:
              key: ST
              name: sp-s3
        image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.1
        name: stonenode
        ports:
        - containerPort: 9433
          name: stonenode
        resources:
          limits:
            cpu: "2"
            memory: 8Gi
          requests:
            cpu: "2"
            memory: 8Gi
        volumeMounts:
        - mountPath: /config
          name: config
      imagePullSecrets:
      - name: image-pull
      volumes:
      - configMap:
          name: config-stonenode-fcf8d8tcc6
        name: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: syncer
  namespace: gf-sp-d
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: syncer
      biz: storage-provider
      team: greenfield
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: syncer
        biz: storage-provider
        team: greenfield
    spec:
      containers:
      - env:
        - name: AWS_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: AK
              name: sp-s3
        - name: AWS_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: SK
              name: sp-s3
        - name: AWS_SESSION_TOKEN
          valueFrom:
            secretKeyRef:
              key: ST
              name: sp-s3
        - name: META_DB_USER
          valueFrom:
            secretKeyRef:
              key: MDU
              name: sp-db
        - name: META_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: MDP
              name: sp-db
        - name: JOB_DB_USER
          valueFrom:
            secretKeyRef:
              key: JDU
              name: sp-db
        - name: JOB_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: JDP
              name: sp-db
        image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.1
        name: syncer
        ports:
        - containerPort: 9533
          name: syncer
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "2"
            memory: 4Gi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /config
          name: config
      imagePullSecrets:
      - name: image-pull
      volumes:
      - configMap:
          name: config-syncer-kfmk46c2th
        name: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: uploader-downloader-challenge
  namespace: gf-sp-d
spec:
  replicas: 1
  selector:
    matchLabels:
      app: uploader-downloader-challenge
      biz: storage-provider
      team: greenfield
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: uploader-downloader-challenge
        biz: storage-provider
        team: greenfield
    spec:
      containers:
      - env:
        - name: AWS_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: AK
              name: sp-s3
        - name: AWS_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: SK
              name: sp-s3
        - name: AWS_SESSION_TOKEN
          valueFrom:
            secretKeyRef:
              key: ST
              name: sp-s3
        - name: META_DB_USER
          valueFrom:
            secretKeyRef:
              key: MDU
              name: sp-db
        - name: META_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: MDP
              name: sp-db
        image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.1
        name: uploader-downloader-challenge
        ports:
        - containerPort: 9133
          name: uploader
        - containerPort: 9233
          name: downloader
        - containerPort: 9033
          name: challenge
        resources:
          limits:
            cpu: "3"
            memory: 12Gi
          requests:
            cpu: "2"
            memory: 8Gi
        volumeMounts:
        - mountPath: /config
          name: config
      imagePullSecrets:
      - name: image-pull
      volumes:
      - configMap:
          name: config-uploader-downloader-challenge-24tmkh4ctb
        name: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: gateway
  namespace: gf-sp-e
spec:
  replicas: 2
  selector:
    matchLabels:
      app: gateway
      biz: storage-provider
      team: greenfield
  template:
    metadata:
      labels:
        app: gateway
        biz: storage-provider
        team: greenfield
    spec:
      containers:
      - image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.1-fix
        name: gateway
        ports:
        - containerPort: 9033
          name: gateway
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "2"
            memory: 4Gi
        volumeMounts:
        - mountPath: /config
          name: config
      imagePullSecrets:
      - name: image-pull
      volumes:
      - configMap:
          name: config-gateway-9tdkcmcmdh
        name: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: stonenode
  namespace: gf-sp-e
spec:
  replicas: 2
  selector:
    matchLabels:
      app: stonenode
      biz: storage-provider
      team: greenfield
  template:
    metadata:
      labels:
        app: stonenode
        biz: storage-provider
        team: greenfield
    spec:
      containers:
      - env:
        - name: AWS_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: AK
              name: sp-s3
        - name: AWS_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: SK
              name: sp-s3
        - name: AWS_SESSION_TOKEN
          valueFrom:
            secretKeyRef:
              key: ST
              name: sp-s3
        image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.1
        name: stonenode
        ports:
        - containerPort: 9433
          name: stonenode
        resources:
          limits:
            cpu: "2"
            memory: 8Gi
          requests:
            cpu: "2"
            memory: 8Gi
        volumeMounts:
        - mountPath: /config
          name: config
      imagePullSecrets:
      - name: image-pull
      volumes:
      - configMap:
          name: config-stonenode-9h7k5k992g
        name: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: syncer
  namespace: gf-sp-e
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: syncer
      biz: storage-provider
      team: greenfield
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: syncer
        biz: storage-provider
        team: greenfield
    spec:
      containers:
      - env:
        - name: AWS_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: AK
              name: sp-s3
        - name: AWS_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: SK
              name: sp-s3
        - name: AWS_SESSION_TOKEN
          valueFrom:
            secretKeyRef:
              key: ST
              name: sp-s3
        - name: META_DB_USER
          valueFrom:
            secretKeyRef:
              key: MDU
              name: sp-db
        - name: META_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: MDP
              name: sp-db
        - name: JOB_DB_USER
          valueFrom:
            secretKeyRef:
              key: JDU
              name: sp-db
        - name: JOB_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: JDP
              name: sp-db
        image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.1
        name: syncer
        ports:
        - containerPort: 9533
          name: syncer
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "2"
            memory: 4Gi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /config
          name: config
      imagePullSecrets:
      - name: image-pull
      volumes:
      - configMap:
          name: config-syncer-9fm2f44m2d
        name: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: uploader-downloader-challenge
  namespace: gf-sp-e
spec:
  replicas: 1
  selector:
    matchLabels:
      app: uploader-downloader-challenge
      biz: storage-provider
      team: greenfield
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: uploader-downloader-challenge
        biz: storage-provider
        team: greenfield
    spec:
      containers:
      - env:
        - name: AWS_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: AK
              name: sp-s3
        - name: AWS_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: SK
              name: sp-s3
        - name: AWS_SESSION_TOKEN
          valueFrom:
            secretKeyRef:
              key: ST
              name: sp-s3
        - name: META_DB_USER
          valueFrom:
            secretKeyRef:
              key: MDU
              name: sp-db
        - name: META_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: MDP
              name: sp-db
        image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.1
        name: uploader-downloader-challenge
        ports:
        - containerPort: 9133
          name: uploader
        - containerPort: 9233
          name: downloader
        - containerPort: 9033
          name: challenge
        resources:
          limits:
            cpu: "3"
            memory: 12Gi
          requests:
            cpu: "2"
            memory: 8Gi
        volumeMounts:
        - mountPath: /config
          name: config
      imagePullSecrets:
      - name: image-pull
      volumes:
      - configMap:
          name: config-uploader-downloader-challenge-mbhktf9d25
        name: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: gateway
  namespace: gf-sp-f
spec:
  replicas: 2
  selector:
    matchLabels:
      app: gateway
      biz: storage-provider
      team: greenfield
  template:
    metadata:
      labels:
        app: gateway
        biz: storage-provider
        team: greenfield
    spec:
      containers:
      - image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.1-fix
        name: gateway
        ports:
        - containerPort: 9033
          name: gateway
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "2"
            memory: 4Gi
        volumeMounts:
        - mountPath: /config
          name: config
      imagePullSecrets:
      - name: image-pull
      volumes:
      - configMap:
          name: config-gateway-d94h7mdhh9
        name: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: stonenode
  namespace: gf-sp-f
spec:
  replicas: 2
  selector:
    matchLabels:
      app: stonenode
      biz: storage-provider
      team: greenfield
  template:
    metadata:
      labels:
        app: stonenode
        biz: storage-provider
        team: greenfield
    spec:
      containers:
      - env:
        - name: AWS_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: AK
              name: sp-s3
        - name: AWS_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: SK
              name: sp-s3
        - name: AWS_SESSION_TOKEN
          valueFrom:
            secretKeyRef:
              key: ST
              name: sp-s3
        image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.1
        name: stonenode
        ports:
        - containerPort: 9433
          name: stonenode
        resources:
          limits:
            cpu: "2"
            memory: 8Gi
          requests:
            cpu: "2"
            memory: 8Gi
        volumeMounts:
        - mountPath: /config
          name: config
      imagePullSecrets:
      - name: image-pull
      volumes:
      - configMap:
          name: config-stonenode-hdbfbc6g9h
        name: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: syncer
  namespace: gf-sp-f
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: syncer
      biz: storage-provider
      team: greenfield
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: syncer
        biz: storage-provider
        team: greenfield
    spec:
      containers:
      - env:
        - name: AWS_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: AK
              name: sp-s3
        - name: AWS_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: SK
              name: sp-s3
        - name: AWS_SESSION_TOKEN
          valueFrom:
            secretKeyRef:
              key: ST
              name: sp-s3
        - name: META_DB_USER
          valueFrom:
            secretKeyRef:
              key: MDU
              name: sp-db
        - name: META_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: MDP
              name: sp-db
        - name: JOB_DB_USER
          valueFrom:
            secretKeyRef:
              key: JDU
              name: sp-db
        - name: JOB_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: JDP
              name: sp-db
        image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.1
        name: syncer
        ports:
        - containerPort: 9533
          name: syncer
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "2"
            memory: 4Gi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /config
          name: config
      imagePullSecrets:
      - name: image-pull
      volumes:
      - configMap:
          name: config-syncer-7t7mh2d5dk
        name: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: uploader-downloader-challenge
  namespace: gf-sp-f
spec:
  replicas: 1
  selector:
    matchLabels:
      app: uploader-downloader-challenge
      biz: storage-provider
      team: greenfield
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: uploader-downloader-challenge
        biz: storage-provider
        team: greenfield
    spec:
      containers:
      - env:
        - name: AWS_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: AK
              name: sp-s3
        - name: AWS_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: SK
              name: sp-s3
        - name: AWS_SESSION_TOKEN
          valueFrom:
            secretKeyRef:
              key: ST
              name: sp-s3
        - name: META_DB_USER
          valueFrom:
            secretKeyRef:
              key: MDU
              name: sp-db
        - name: META_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: MDP
              name: sp-db
        image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.1
        name: uploader-downloader-challenge
        ports:
        - containerPort: 9133
          name: uploader
        - containerPort: 9233
          name: downloader
        - containerPort: 9033
          name: challenge
        resources:
          limits:
            cpu: "3"
            memory: 12Gi
          requests:
            cpu: "2"
            memory: 8Gi
        volumeMounts:
        - mountPath: /config
          name: config
      imagePullSecrets:
      - name: image-pull
      volumes:
      - configMap:
          name: config-uploader-downloader-challenge-5h9f8d7f4d
        name: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: gateway
  namespace: gf-sp-g
spec:
  replicas: 2
  selector:
    matchLabels:
      app: gateway
      biz: storage-provider
      team: greenfield
  template:
    metadata:
      labels:
        app: gateway
        biz: storage-provider
        team: greenfield
    spec:
      containers:
      - image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.1-fix
        name: gateway
        ports:
        - containerPort: 9033
          name: gateway
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "2"
            memory: 4Gi
        volumeMounts:
        - mountPath: /config
          name: config
      imagePullSecrets:
      - name: image-pull
      volumes:
      - configMap:
          name: config-gateway-9d65ktd8hh
        name: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: stonenode
  namespace: gf-sp-g
spec:
  replicas: 2
  selector:
    matchLabels:
      app: stonenode
      biz: storage-provider
      team: greenfield
  template:
    metadata:
      labels:
        app: stonenode
        biz: storage-provider
        team: greenfield
    spec:
      containers:
      - env:
        - name: AWS_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: AK
              name: sp-s3
        - name: AWS_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: SK
              name: sp-s3
        - name: AWS_SESSION_TOKEN
          valueFrom:
            secretKeyRef:
              key: ST
              name: sp-s3
        image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.1
        name: stonenode
        ports:
        - containerPort: 9433
          name: stonenode
        resources:
          limits:
            cpu: "2"
            memory: 8Gi
          requests:
            cpu: "2"
            memory: 8Gi
        volumeMounts:
        - mountPath: /config
          name: config
      imagePullSecrets:
      - name: image-pull
      volumes:
      - configMap:
          name: config-stonenode-gm4kfmc878
        name: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: syncer
  namespace: gf-sp-g
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: syncer
      biz: storage-provider
      team: greenfield
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: syncer
        biz: storage-provider
        team: greenfield
    spec:
      containers:
      - env:
        - name: AWS_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: AK
              name: sp-s3
        - name: AWS_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: SK
              name: sp-s3
        - name: AWS_SESSION_TOKEN
          valueFrom:
            secretKeyRef:
              key: ST
              name: sp-s3
        - name: META_DB_USER
          valueFrom:
            secretKeyRef:
              key: MDU
              name: sp-db
        - name: META_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: MDP
              name: sp-db
        - name: JOB_DB_USER
          valueFrom:
            secretKeyRef:
              key: JDU
              name: sp-db
        - name: JOB_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: JDP
              name: sp-db
        image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.1
        name: syncer
        ports:
        - containerPort: 9533
          name: syncer
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "2"
            memory: 4Gi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /config
          name: config
      imagePullSecrets:
      - name: image-pull
      volumes:
      - configMap:
          name: config-syncer-2mff259bfh
        name: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: uploader-downloader-challenge
  namespace: gf-sp-g
spec:
  replicas: 1
  selector:
    matchLabels:
      app: uploader-downloader-challenge
      biz: storage-provider
      team: greenfield
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: uploader-downloader-challenge
        biz: storage-provider
        team: greenfield
    spec:
      containers:
      - env:
        - name: AWS_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: AK
              name: sp-s3
        - name: AWS_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: SK
              name: sp-s3
        - name: AWS_SESSION_TOKEN
          valueFrom:
            secretKeyRef:
              key: ST
              name: sp-s3
        - name: META_DB_USER
          valueFrom:
            secretKeyRef:
              key: MDU
              name: sp-db
        - name: META_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: MDP
              name: sp-db
        image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.1
        name: uploader-downloader-challenge
        ports:
        - containerPort: 9133
          name: uploader
        - containerPort: 9233
          name: downloader
        - containerPort: 9033
          name: challenge
        resources:
          limits:
            cpu: "3"
            memory: 12Gi
          requests:
            cpu: "2"
            memory: 8Gi
        volumeMounts:
        - mountPath: /config
          name: config
      imagePullSecrets:
      - name: image-pull
      volumes:
      - configMap:
          name: config-uploader-downloader-challenge-65tf7hd4cb
        name: config
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: stonehub
  namespace: gf-sp-a
spec:
  replicas: 1
  selector:
    matchLabels:
      app: stonehub
      biz: storage-provider
      team: greenfield
  serviceName: stonehub
  template:
    metadata:
      labels:
        app: stonehub
        biz: storage-provider
        team: greenfield
    spec:
      containers:
      - env:
        - name: META_DB_USER
          valueFrom:
            secretKeyRef:
              key: MDU
              name: sp-db
        - name: META_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: MDP
              name: sp-db
        - name: JOB_DB_USER
          valueFrom:
            secretKeyRef:
              key: JDU
              name: sp-db
        - name: JOB_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: JDP
              name: sp-db
        image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.1
        name: stonehub
        ports:
        - containerPort: 9333
          name: stonehub
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "1"
            memory: 2Gi
        volumeMounts:
        - mountPath: /config
          name: config
      imagePullSecrets:
      - name: image-pull
      volumes:
      - configMap:
          name: config-stonehub-fm45d5c8tm
        name: config
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: stonehub
  namespace: gf-sp-b
spec:
  replicas: 1
  selector:
    matchLabels:
      app: stonehub
      biz: storage-provider
      team: greenfield
  serviceName: stonehub
  template:
    metadata:
      labels:
        app: stonehub
        biz: storage-provider
        team: greenfield
    spec:
      containers:
      - env:
        - name: META_DB_USER
          valueFrom:
            secretKeyRef:
              key: MDU
              name: sp-db
        - name: META_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: MDP
              name: sp-db
        - name: JOB_DB_USER
          valueFrom:
            secretKeyRef:
              key: JDU
              name: sp-db
        - name: JOB_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: JDP
              name: sp-db
        image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.1
        name: stonehub
        ports:
        - containerPort: 9333
          name: stonehub
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "1"
            memory: 2Gi
        volumeMounts:
        - mountPath: /config
          name: config
      imagePullSecrets:
      - name: image-pull
      volumes:
      - configMap:
          name: config-stonehub-7f6h4dg275
        name: config
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: stonehub
  namespace: gf-sp-c
spec:
  replicas: 1
  selector:
    matchLabels:
      app: stonehub
      biz: storage-provider
      team: greenfield
  serviceName: stonehub
  template:
    metadata:
      labels:
        app: stonehub
        biz: storage-provider
        team: greenfield
    spec:
      containers:
      - env:
        - name: META_DB_USER
          valueFrom:
            secretKeyRef:
              key: MDU
              name: sp-db
        - name: META_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: MDP
              name: sp-db
        - name: JOB_DB_USER
          valueFrom:
            secretKeyRef:
              key: JDU
              name: sp-db
        - name: JOB_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: JDP
              name: sp-db
        image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.1
        name: stonehub
        ports:
        - containerPort: 9333
          name: stonehub
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "1"
            memory: 2Gi
        volumeMounts:
        - mountPath: /config
          name: config
      imagePullSecrets:
      - name: image-pull
      volumes:
      - configMap:
          name: config-stonehub-2998c9b546
        name: config
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: stonehub
  namespace: gf-sp-devops
spec:
  replicas: 1
  selector:
    matchLabels:
      app: stonehub
      biz: storage-provider
      team: greenfield
  serviceName: stonehub
  template:
    metadata:
      labels:
        app: stonehub
        biz: storage-provider
        team: greenfield
    spec:
      containers:
      - env:
        - name: META_DB_USER
          valueFrom:
            secretKeyRef:
              key: MDU
              name: sp-db
        - name: META_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: MDP
              name: sp-db
        - name: JOB_DB_USER
          valueFrom:
            secretKeyRef:
              key: JDU
              name: sp-db
        - name: JOB_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: JDP
              name: sp-db
        image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.1
        name: stonehub
        ports:
        - containerPort: 9333
          name: stonehub
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "1"
            memory: 2Gi
        volumeMounts:
        - mountPath: /config
          name: config
      imagePullSecrets:
      - name: image-pull
      volumes:
      - configMap:
          name: config-stonehub-49528bgm7k
        name: config
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: stonehub
  namespace: gf-sp-d
spec:
  replicas: 1
  selector:
    matchLabels:
      app: stonehub
      biz: storage-provider
      team: greenfield
  serviceName: stonehub
  template:
    metadata:
      labels:
        app: stonehub
        biz: storage-provider
        team: greenfield
    spec:
      containers:
      - env:
        - name: META_DB_USER
          valueFrom:
            secretKeyRef:
              key: MDU
              name: sp-db
        - name: META_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: MDP
              name: sp-db
        - name: JOB_DB_USER
          valueFrom:
            secretKeyRef:
              key: JDU
              name: sp-db
        - name: JOB_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: JDP
              name: sp-db
        image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.1
        name: stonehub
        ports:
        - containerPort: 9333
          name: stonehub
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "1"
            memory: 2Gi
        volumeMounts:
        - mountPath: /config
          name: config
      imagePullSecrets:
      - name: image-pull
      volumes:
      - configMap:
          name: config-stonehub-d4hk7f78f8
        name: config
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: stonehub
  namespace: gf-sp-e
spec:
  replicas: 1
  selector:
    matchLabels:
      app: stonehub
      biz: storage-provider
      team: greenfield
  serviceName: stonehub
  template:
    metadata:
      labels:
        app: stonehub
        biz: storage-provider
        team: greenfield
    spec:
      containers:
      - env:
        - name: META_DB_USER
          valueFrom:
            secretKeyRef:
              key: MDU
              name: sp-db
        - name: META_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: MDP
              name: sp-db
        - name: JOB_DB_USER
          valueFrom:
            secretKeyRef:
              key: JDU
              name: sp-db
        - name: JOB_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: JDP
              name: sp-db
        image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.1
        name: stonehub
        ports:
        - containerPort: 9333
          name: stonehub
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "1"
            memory: 2Gi
        volumeMounts:
        - mountPath: /config
          name: config
      imagePullSecrets:
      - name: image-pull
      volumes:
      - configMap:
          name: config-stonehub-t6h62ftd7c
        name: config
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: stonehub
  namespace: gf-sp-f
spec:
  replicas: 1
  selector:
    matchLabels:
      app: stonehub
      biz: storage-provider
      team: greenfield
  serviceName: stonehub
  template:
    metadata:
      labels:
        app: stonehub
        biz: storage-provider
        team: greenfield
    spec:
      containers:
      - env:
        - name: META_DB_USER
          valueFrom:
            secretKeyRef:
              key: MDU
              name: sp-db
        - name: META_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: MDP
              name: sp-db
        - name: JOB_DB_USER
          valueFrom:
            secretKeyRef:
              key: JDU
              name: sp-db
        - name: JOB_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: JDP
              name: sp-db
        image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.1
        name: stonehub
        ports:
        - containerPort: 9333
          name: stonehub
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "1"
            memory: 2Gi
        volumeMounts:
        - mountPath: /config
          name: config
      imagePullSecrets:
      - name: image-pull
      volumes:
      - configMap:
          name: config-stonehub-k99dfc6dfk
        name: config
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    biz: storage-provider
    team: greenfield
  name: stonehub
  namespace: gf-sp-g
spec:
  replicas: 1
  selector:
    matchLabels:
      app: stonehub
      biz: storage-provider
      team: greenfield
  serviceName: stonehub
  template:
    metadata:
      labels:
        app: stonehub
        biz: storage-provider
        team: greenfield
    spec:
      containers:
      - env:
        - name: META_DB_USER
          valueFrom:
            secretKeyRef:
              key: MDU
              name: sp-db
        - name: META_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: MDP
              name: sp-db
        - name: JOB_DB_USER
          valueFrom:
            secretKeyRef:
              key: JDU
              name: sp-db
        - name: JOB_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: JDP
              name: sp-db
        image: ghcr.io/bnb-chain/greenfield-storage-provider:0.0.1
        name: stonehub
        ports:
        - containerPort: 9333
          name: stonehub
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "1"
            memory: 2Gi
        volumeMounts:
        - mountPath: /config
          name: config
      imagePullSecrets:
      - name: image-pull
      volumes:
      - configMap:
          name: config-stonehub-h5887f428k
        name: config
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    external-dns.alpha.kubernetes.io/ingress-hostname-source: annotation-only
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/connection-proxy-header: ""
    nginx.ingress.kubernetes.io/proxy-body-size: 2048m
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "10"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "10"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "10"
    nginx.ingress.kubernetes.io/use-regex: "true"
  labels:
    biz: storage-provider
    team: greenfield
  name: gateway
  namespace: gf-sp-a
spec:
  rules:
  - host: gf-sp-a-bk.dev.nodereal.cc
    http:
      paths:
      - backend:
          service:
            name: gateway
            port:
              number: 9033
        path: /
        pathType: ImplementationSpecific
  - host: '*.gf-sp-a-bk.dev.nodereal.cc'
    http:
      paths:
      - backend:
          service:
            name: gateway
            port:
              number: 9033
        path: /
        pathType: ImplementationSpecific
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    external-dns.alpha.kubernetes.io/ingress-hostname-source: annotation-only
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/connection-proxy-header: ""
    nginx.ingress.kubernetes.io/proxy-body-size: 2048m
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "10"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "10"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "10"
    nginx.ingress.kubernetes.io/use-regex: "true"
  labels:
    biz: storage-provider
    team: greenfield
  name: gateway
  namespace: gf-sp-b
spec:
  rules:
  - host: gf-sp-b-bk.dev.nodereal.cc
    http:
      paths:
      - backend:
          service:
            name: gateway
            port:
              number: 9033
        path: /
        pathType: ImplementationSpecific
  - host: '*.gf-sp-b-bk.dev.nodereal.cc'
    http:
      paths:
      - backend:
          service:
            name: gateway
            port:
              number: 9033
        path: /
        pathType: ImplementationSpecific
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    external-dns.alpha.kubernetes.io/ingress-hostname-source: annotation-only
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/connection-proxy-header: ""
    nginx.ingress.kubernetes.io/proxy-body-size: 2048m
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "10"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "10"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "10"
    nginx.ingress.kubernetes.io/use-regex: "true"
  labels:
    biz: storage-provider
    team: greenfield
  name: gateway
  namespace: gf-sp-c
spec:
  rules:
  - host: gf-sp-c-bk.dev.nodereal.cc
    http:
      paths:
      - backend:
          service:
            name: gateway
            port:
              number: 9033
        path: /
        pathType: ImplementationSpecific
  - host: '*.gf-sp-c-bk.dev.nodereal.cc'
    http:
      paths:
      - backend:
          service:
            name: gateway
            port:
              number: 9033
        path: /
        pathType: ImplementationSpecific
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    external-dns.alpha.kubernetes.io/ingress-hostname-source: annotation-only
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/connection-proxy-header: ""
    nginx.ingress.kubernetes.io/proxy-body-size: 2048m
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "10"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "10"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "10"
    nginx.ingress.kubernetes.io/use-regex: "true"
  labels:
    biz: storage-provider
    team: greenfield
  name: gateway
  namespace: gf-sp-devops
spec:
  rules:
  - host: gf-sp-devops-bk.dev.nodereal.cc
    http:
      paths:
      - backend:
          service:
            name: gateway
            port:
              number: 9033
        path: /
        pathType: ImplementationSpecific
  - host: '*.gf-sp-devops-bk.dev.nodereal.cc'
    http:
      paths:
      - backend:
          service:
            name: gateway
            port:
              number: 9033
        path: /
        pathType: ImplementationSpecific
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    external-dns.alpha.kubernetes.io/ingress-hostname-source: annotation-only
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/connection-proxy-header: ""
    nginx.ingress.kubernetes.io/proxy-body-size: 2048m
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "10"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "10"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "10"
    nginx.ingress.kubernetes.io/use-regex: "true"
  labels:
    biz: storage-provider
    team: greenfield
  name: gateway
  namespace: gf-sp-d
spec:
  rules:
  - host: gf-sp-d-bk.dev.nodereal.cc
    http:
      paths:
      - backend:
          service:
            name: gateway
            port:
              number: 9033
        path: /
        pathType: ImplementationSpecific
  - host: '*.gf-sp-d-bk.dev.nodereal.cc'
    http:
      paths:
      - backend:
          service:
            name: gateway
            port:
              number: 9033
        path: /
        pathType: ImplementationSpecific
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    external-dns.alpha.kubernetes.io/ingress-hostname-source: annotation-only
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/connection-proxy-header: ""
    nginx.ingress.kubernetes.io/proxy-body-size: 2048m
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "10"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "10"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "10"
    nginx.ingress.kubernetes.io/use-regex: "true"
  labels:
    biz: storage-provider
    team: greenfield
  name: gateway
  namespace: gf-sp-e
spec:
  rules:
  - host: gf-sp-e-bk.dev.nodereal.cc
    http:
      paths:
      - backend:
          service:
            name: gateway
            port:
              number: 9033
        path: /
        pathType: ImplementationSpecific
  - host: '*.gf-sp-e-bk.dev.nodereal.cc'
    http:
      paths:
      - backend:
          service:
            name: gateway
            port:
              number: 9033
        path: /
        pathType: ImplementationSpecific
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    external-dns.alpha.kubernetes.io/ingress-hostname-source: annotation-only
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/connection-proxy-header: ""
    nginx.ingress.kubernetes.io/proxy-body-size: 2048m
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "10"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "10"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "10"
    nginx.ingress.kubernetes.io/use-regex: "true"
  labels:
    biz: storage-provider
    team: greenfield
  name: gateway
  namespace: gf-sp-f
spec:
  rules:
  - host: gf-sp-f-bk.dev.nodereal.cc
    http:
      paths:
      - backend:
          service:
            name: gateway
            port:
              number: 9033
        path: /
        pathType: ImplementationSpecific
  - host: '*.gf-sp-f-bk.dev.nodereal.cc'
    http:
      paths:
      - backend:
          service:
            name: gateway
            port:
              number: 9033
        path: /
        pathType: ImplementationSpecific
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    external-dns.alpha.kubernetes.io/ingress-hostname-source: annotation-only
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/connection-proxy-header: ""
    nginx.ingress.kubernetes.io/proxy-body-size: 2048m
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "10"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "10"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "10"
    nginx.ingress.kubernetes.io/use-regex: "true"
  labels:
    biz: storage-provider
    team: greenfield
  name: gateway
  namespace: gf-sp-g
spec:
  rules:
  - host: gf-sp-g-bk.dev.nodereal.cc
    http:
      paths:
      - backend:
          service:
            name: gateway
            port:
              number: 9033
        path: /
        pathType: ImplementationSpecific
  - host: '*.gf-sp-g-bk.dev.nodereal.cc'
    http:
      paths:
      - backend:
          service:
            name: gateway
            port:
              number: 9033
        path: /
        pathType: ImplementationSpecific
